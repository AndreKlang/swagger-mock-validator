{"version":3,"file":"cli.js","sources":["../node_modules/commander/lib/error.js","../node_modules/commander/lib/argument.js","../node_modules/commander/lib/help.js","../node_modules/commander/lib/option.js","../node_modules/commander/lib/suggestSimilar.js","../node_modules/commander/lib/command.js","../node_modules/commander/index.js","../node_modules/commander/esm.mjs","../lib/cli.ts"],"sourcesContent":["// @ts-check\n\n/**\n * CommanderError class\n * @class\n */\nclass CommanderError extends Error {\n  /**\n   * Constructs the CommanderError class\n   * @param {number} exitCode suggested exit code which could be used with process.exit\n   * @param {string} code an id string representing the error\n   * @param {string} message human-readable description of the error\n   * @constructor\n   */\n  constructor(exitCode, code, message) {\n    super(message);\n    // properly capture stack trace in Node.js\n    Error.captureStackTrace(this, this.constructor);\n    this.name = this.constructor.name;\n    this.code = code;\n    this.exitCode = exitCode;\n    this.nestedError = undefined;\n  }\n}\n\n/**\n * InvalidArgumentError class\n * @class\n */\nclass InvalidArgumentError extends CommanderError {\n  /**\n   * Constructs the InvalidArgumentError class\n   * @param {string} [message] explanation of why argument is invalid\n   * @constructor\n   */\n  constructor(message) {\n    super(1, 'commander.invalidArgument', message);\n    // properly capture stack trace in Node.js\n    Error.captureStackTrace(this, this.constructor);\n    this.name = this.constructor.name;\n  }\n}\n\nexports.CommanderError = CommanderError;\nexports.InvalidArgumentError = InvalidArgumentError;\n","const { InvalidArgumentError } = require('./error.js');\n\n// @ts-check\n\nclass Argument {\n  /**\n   * Initialize a new command argument with the given name and description.\n   * The default is that the argument is required, and you can explicitly\n   * indicate this with <> around the name. Put [] around the name for an optional argument.\n   *\n   * @param {string} name\n   * @param {string} [description]\n   */\n\n  constructor(name, description) {\n    this.description = description || '';\n    this.variadic = false;\n    this.parseArg = undefined;\n    this.defaultValue = undefined;\n    this.defaultValueDescription = undefined;\n    this.argChoices = undefined;\n\n    switch (name[0]) {\n      case '<': // e.g. <required>\n        this.required = true;\n        this._name = name.slice(1, -1);\n        break;\n      case '[': // e.g. [optional]\n        this.required = false;\n        this._name = name.slice(1, -1);\n        break;\n      default:\n        this.required = true;\n        this._name = name;\n        break;\n    }\n\n    if (this._name.length > 3 && this._name.slice(-3) === '...') {\n      this.variadic = true;\n      this._name = this._name.slice(0, -3);\n    }\n  }\n\n  /**\n   * Return argument name.\n   *\n   * @return {string}\n   */\n\n  name() {\n    return this._name;\n  }\n\n  /**\n   * @api private\n   */\n\n  _concatValue(value, previous) {\n    if (previous === this.defaultValue || !Array.isArray(previous)) {\n      return [value];\n    }\n\n    return previous.concat(value);\n  }\n\n  /**\n   * Set the default value, and optionally supply the description to be displayed in the help.\n   *\n   * @param {any} value\n   * @param {string} [description]\n   * @return {Argument}\n   */\n\n  default(value, description) {\n    this.defaultValue = value;\n    this.defaultValueDescription = description;\n    return this;\n  }\n\n  /**\n   * Set the custom handler for processing CLI command arguments into argument values.\n   *\n   * @param {Function} [fn]\n   * @return {Argument}\n   */\n\n  argParser(fn) {\n    this.parseArg = fn;\n    return this;\n  }\n\n  /**\n   * Only allow argument value to be one of choices.\n   *\n   * @param {string[]} values\n   * @return {Argument}\n   */\n\n  choices(values) {\n    this.argChoices = values.slice();\n    this.parseArg = (arg, previous) => {\n      if (!this.argChoices.includes(arg)) {\n        throw new InvalidArgumentError(`Allowed choices are ${this.argChoices.join(', ')}.`);\n      }\n      if (this.variadic) {\n        return this._concatValue(arg, previous);\n      }\n      return arg;\n    };\n    return this;\n  }\n\n  /**\n   * Make argument required.\n   */\n  argRequired() {\n    this.required = true;\n    return this;\n  }\n\n  /**\n   * Make argument optional.\n   */\n  argOptional() {\n    this.required = false;\n    return this;\n  }\n}\n\n/**\n * Takes an argument and returns its human readable equivalent for help usage.\n *\n * @param {Argument} arg\n * @return {string}\n * @api private\n */\n\nfunction humanReadableArgName(arg) {\n  const nameOutput = arg.name() + (arg.variadic === true ? '...' : '');\n\n  return arg.required\n    ? '<' + nameOutput + '>'\n    : '[' + nameOutput + ']';\n}\n\nexports.Argument = Argument;\nexports.humanReadableArgName = humanReadableArgName;\n","const { humanReadableArgName } = require('./argument.js');\n\n/**\n * TypeScript import types for JSDoc, used by Visual Studio Code IntelliSense and `npm run typescript-checkJS`\n * https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html#import-types\n * @typedef { import(\"./argument.js\").Argument } Argument\n * @typedef { import(\"./command.js\").Command } Command\n * @typedef { import(\"./option.js\").Option } Option\n */\n\n// @ts-check\n\n// Although this is a class, methods are static in style to allow override using subclass or just functions.\nclass Help {\n  constructor() {\n    this.helpWidth = undefined;\n    this.sortSubcommands = false;\n    this.sortOptions = false;\n    this.showGlobalOptions = false;\n  }\n\n  /**\n   * Get an array of the visible subcommands. Includes a placeholder for the implicit help command, if there is one.\n   *\n   * @param {Command} cmd\n   * @returns {Command[]}\n   */\n\n  visibleCommands(cmd) {\n    const visibleCommands = cmd.commands.filter(cmd => !cmd._hidden);\n    if (cmd._hasImplicitHelpCommand()) {\n      // Create a command matching the implicit help command.\n      const [, helpName, helpArgs] = cmd._helpCommandnameAndArgs.match(/([^ ]+) *(.*)/);\n      const helpCommand = cmd.createCommand(helpName)\n        .helpOption(false);\n      helpCommand.description(cmd._helpCommandDescription);\n      if (helpArgs) helpCommand.arguments(helpArgs);\n      visibleCommands.push(helpCommand);\n    }\n    if (this.sortSubcommands) {\n      visibleCommands.sort((a, b) => {\n        // @ts-ignore: overloaded return type\n        return a.name().localeCompare(b.name());\n      });\n    }\n    return visibleCommands;\n  }\n\n  /**\n   * Compare options for sort.\n   *\n   * @param {Option} a\n   * @param {Option} b\n   * @returns number\n   */\n  compareOptions(a, b) {\n    const getSortKey = (option) => {\n      // WYSIWYG for order displayed in help. Short used for comparison if present. No special handling for negated.\n      return option.short ? option.short.replace(/^-/, '') : option.long.replace(/^--/, '');\n    };\n    return getSortKey(a).localeCompare(getSortKey(b));\n  }\n\n  /**\n   * Get an array of the visible options. Includes a placeholder for the implicit help option, if there is one.\n   *\n   * @param {Command} cmd\n   * @returns {Option[]}\n   */\n\n  visibleOptions(cmd) {\n    const visibleOptions = cmd.options.filter((option) => !option.hidden);\n    // Implicit help\n    const showShortHelpFlag = cmd._hasHelpOption && cmd._helpShortFlag && !cmd._findOption(cmd._helpShortFlag);\n    const showLongHelpFlag = cmd._hasHelpOption && !cmd._findOption(cmd._helpLongFlag);\n    if (showShortHelpFlag || showLongHelpFlag) {\n      let helpOption;\n      if (!showShortHelpFlag) {\n        helpOption = cmd.createOption(cmd._helpLongFlag, cmd._helpDescription);\n      } else if (!showLongHelpFlag) {\n        helpOption = cmd.createOption(cmd._helpShortFlag, cmd._helpDescription);\n      } else {\n        helpOption = cmd.createOption(cmd._helpFlags, cmd._helpDescription);\n      }\n      visibleOptions.push(helpOption);\n    }\n    if (this.sortOptions) {\n      visibleOptions.sort(this.compareOptions);\n    }\n    return visibleOptions;\n  }\n\n  /**\n   * Get an array of the visible global options. (Not including help.)\n   *\n   * @param {Command} cmd\n   * @returns {Option[]}\n   */\n\n  visibleGlobalOptions(cmd) {\n    if (!this.showGlobalOptions) return [];\n\n    const globalOptions = [];\n    for (let parentCmd = cmd.parent; parentCmd; parentCmd = parentCmd.parent) {\n      const visibleOptions = parentCmd.options.filter((option) => !option.hidden);\n      globalOptions.push(...visibleOptions);\n    }\n    if (this.sortOptions) {\n      globalOptions.sort(this.compareOptions);\n    }\n    return globalOptions;\n  }\n\n  /**\n   * Get an array of the arguments if any have a description.\n   *\n   * @param {Command} cmd\n   * @returns {Argument[]}\n   */\n\n  visibleArguments(cmd) {\n    // Side effect! Apply the legacy descriptions before the arguments are displayed.\n    if (cmd._argsDescription) {\n      cmd._args.forEach(argument => {\n        argument.description = argument.description || cmd._argsDescription[argument.name()] || '';\n      });\n    }\n\n    // If there are any arguments with a description then return all the arguments.\n    if (cmd._args.find(argument => argument.description)) {\n      return cmd._args;\n    }\n    return [];\n  }\n\n  /**\n   * Get the command term to show in the list of subcommands.\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  subcommandTerm(cmd) {\n    // Legacy. Ignores custom usage string, and nested commands.\n    const args = cmd._args.map(arg => humanReadableArgName(arg)).join(' ');\n    return cmd._name +\n      (cmd._aliases[0] ? '|' + cmd._aliases[0] : '') +\n      (cmd.options.length ? ' [options]' : '') + // simplistic check for non-help option\n      (args ? ' ' + args : '');\n  }\n\n  /**\n   * Get the option term to show in the list of options.\n   *\n   * @param {Option} option\n   * @returns {string}\n   */\n\n  optionTerm(option) {\n    return option.flags;\n  }\n\n  /**\n   * Get the argument term to show in the list of arguments.\n   *\n   * @param {Argument} argument\n   * @returns {string}\n   */\n\n  argumentTerm(argument) {\n    return argument.name();\n  }\n\n  /**\n   * Get the longest command term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  longestSubcommandTermLength(cmd, helper) {\n    return helper.visibleCommands(cmd).reduce((max, command) => {\n      return Math.max(max, helper.subcommandTerm(command).length);\n    }, 0);\n  }\n\n  /**\n   * Get the longest option term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  longestOptionTermLength(cmd, helper) {\n    return helper.visibleOptions(cmd).reduce((max, option) => {\n      return Math.max(max, helper.optionTerm(option).length);\n    }, 0);\n  }\n\n  /**\n   * Get the longest global option term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  longestGlobalOptionTermLength(cmd, helper) {\n    return helper.visibleGlobalOptions(cmd).reduce((max, option) => {\n      return Math.max(max, helper.optionTerm(option).length);\n    }, 0);\n  }\n\n  /**\n   * Get the longest argument term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  longestArgumentTermLength(cmd, helper) {\n    return helper.visibleArguments(cmd).reduce((max, argument) => {\n      return Math.max(max, helper.argumentTerm(argument).length);\n    }, 0);\n  }\n\n  /**\n   * Get the command usage to be displayed at the top of the built-in help.\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  commandUsage(cmd) {\n    // Usage\n    let cmdName = cmd._name;\n    if (cmd._aliases[0]) {\n      cmdName = cmdName + '|' + cmd._aliases[0];\n    }\n    let parentCmdNames = '';\n    for (let parentCmd = cmd.parent; parentCmd; parentCmd = parentCmd.parent) {\n      parentCmdNames = parentCmd.name() + ' ' + parentCmdNames;\n    }\n    return parentCmdNames + cmdName + ' ' + cmd.usage();\n  }\n\n  /**\n   * Get the description for the command.\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  commandDescription(cmd) {\n    // @ts-ignore: overloaded return type\n    return cmd.description();\n  }\n\n  /**\n   * Get the subcommand summary to show in the list of subcommands.\n   * (Fallback to description for backwards compatibility.)\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  subcommandDescription(cmd) {\n    // @ts-ignore: overloaded return type\n    return cmd.summary() || cmd.description();\n  }\n\n  /**\n   * Get the option description to show in the list of options.\n   *\n   * @param {Option} option\n   * @return {string}\n   */\n\n  optionDescription(option) {\n    const extraInfo = [];\n\n    if (option.argChoices) {\n      extraInfo.push(\n        // use stringify to match the display of the default value\n        `choices: ${option.argChoices.map((choice) => JSON.stringify(choice)).join(', ')}`);\n    }\n    if (option.defaultValue !== undefined) {\n      // default for boolean and negated more for programmer than end user,\n      // but show true/false for boolean option as may be for hand-rolled env or config processing.\n      const showDefault = option.required || option.optional ||\n        (option.isBoolean() && typeof option.defaultValue === 'boolean');\n      if (showDefault) {\n        extraInfo.push(`default: ${option.defaultValueDescription || JSON.stringify(option.defaultValue)}`);\n      }\n    }\n    // preset for boolean and negated are more for programmer than end user\n    if (option.presetArg !== undefined && option.optional) {\n      extraInfo.push(`preset: ${JSON.stringify(option.presetArg)}`);\n    }\n    if (option.envVar !== undefined) {\n      extraInfo.push(`env: ${option.envVar}`);\n    }\n    if (extraInfo.length > 0) {\n      return `${option.description} (${extraInfo.join(', ')})`;\n    }\n\n    return option.description;\n  }\n\n  /**\n   * Get the argument description to show in the list of arguments.\n   *\n   * @param {Argument} argument\n   * @return {string}\n   */\n\n  argumentDescription(argument) {\n    const extraInfo = [];\n    if (argument.argChoices) {\n      extraInfo.push(\n        // use stringify to match the display of the default value\n        `choices: ${argument.argChoices.map((choice) => JSON.stringify(choice)).join(', ')}`);\n    }\n    if (argument.defaultValue !== undefined) {\n      extraInfo.push(`default: ${argument.defaultValueDescription || JSON.stringify(argument.defaultValue)}`);\n    }\n    if (extraInfo.length > 0) {\n      const extraDescripton = `(${extraInfo.join(', ')})`;\n      if (argument.description) {\n        return `${argument.description} ${extraDescripton}`;\n      }\n      return extraDescripton;\n    }\n    return argument.description;\n  }\n\n  /**\n   * Generate the built-in help text.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {string}\n   */\n\n  formatHelp(cmd, helper) {\n    const termWidth = helper.padWidth(cmd, helper);\n    const helpWidth = helper.helpWidth || 80;\n    const itemIndentWidth = 2;\n    const itemSeparatorWidth = 2; // between term and description\n    function formatItem(term, description) {\n      if (description) {\n        const fullText = `${term.padEnd(termWidth + itemSeparatorWidth)}${description}`;\n        return helper.wrap(fullText, helpWidth - itemIndentWidth, termWidth + itemSeparatorWidth);\n      }\n      return term;\n    }\n    function formatList(textArray) {\n      return textArray.join('\\n').replace(/^/gm, ' '.repeat(itemIndentWidth));\n    }\n\n    // Usage\n    let output = [`Usage: ${helper.commandUsage(cmd)}`, ''];\n\n    // Description\n    const commandDescription = helper.commandDescription(cmd);\n    if (commandDescription.length > 0) {\n      output = output.concat([helper.wrap(commandDescription, helpWidth, 0), '']);\n    }\n\n    // Arguments\n    const argumentList = helper.visibleArguments(cmd).map((argument) => {\n      return formatItem(helper.argumentTerm(argument), helper.argumentDescription(argument));\n    });\n    if (argumentList.length > 0) {\n      output = output.concat(['Arguments:', formatList(argumentList), '']);\n    }\n\n    // Options\n    const optionList = helper.visibleOptions(cmd).map((option) => {\n      return formatItem(helper.optionTerm(option), helper.optionDescription(option));\n    });\n    if (optionList.length > 0) {\n      output = output.concat(['Options:', formatList(optionList), '']);\n    }\n\n    if (this.showGlobalOptions) {\n      const globalOptionList = helper.visibleGlobalOptions(cmd).map((option) => {\n        return formatItem(helper.optionTerm(option), helper.optionDescription(option));\n      });\n      if (globalOptionList.length > 0) {\n        output = output.concat(['Global Options:', formatList(globalOptionList), '']);\n      }\n    }\n\n    // Commands\n    const commandList = helper.visibleCommands(cmd).map((cmd) => {\n      return formatItem(helper.subcommandTerm(cmd), helper.subcommandDescription(cmd));\n    });\n    if (commandList.length > 0) {\n      output = output.concat(['Commands:', formatList(commandList), '']);\n    }\n\n    return output.join('\\n');\n  }\n\n  /**\n   * Calculate the pad width from the maximum term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  padWidth(cmd, helper) {\n    return Math.max(\n      helper.longestOptionTermLength(cmd, helper),\n      helper.longestGlobalOptionTermLength(cmd, helper),\n      helper.longestSubcommandTermLength(cmd, helper),\n      helper.longestArgumentTermLength(cmd, helper)\n    );\n  }\n\n  /**\n   * Wrap the given string to width characters per line, with lines after the first indented.\n   * Do not wrap if insufficient room for wrapping (minColumnWidth), or string is manually formatted.\n   *\n   * @param {string} str\n   * @param {number} width\n   * @param {number} indent\n   * @param {number} [minColumnWidth=40]\n   * @return {string}\n   *\n   */\n\n  wrap(str, width, indent, minColumnWidth = 40) {\n    // Full \\s characters, minus the linefeeds.\n    const indents = ' \\\\f\\\\t\\\\v\\u00a0\\u1680\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff';\n    // Detect manually wrapped and indented strings by searching for line break followed by spaces.\n    const manualIndent = new RegExp(`[\\\\n][${indents}]+`);\n    if (str.match(manualIndent)) return str;\n    // Do not wrap if not enough room for a wrapped column of text (as could end up with a word per line).\n    const columnWidth = width - indent;\n    if (columnWidth < minColumnWidth) return str;\n\n    const leadingStr = str.slice(0, indent);\n    const columnText = str.slice(indent).replace('\\r\\n', '\\n');\n    const indentString = ' '.repeat(indent);\n    const zeroWidthSpace = '\\u200B';\n    const breaks = `\\\\s${zeroWidthSpace}`;\n    // Match line end (so empty lines don't collapse),\n    // or as much text as will fit in column, or excess text up to first break.\n    const regex = new RegExp(`\\n|.{1,${columnWidth - 1}}([${breaks}]|$)|[^${breaks}]+?([${breaks}]|$)`, 'g');\n    const lines = columnText.match(regex) || [];\n    return leadingStr + lines.map((line, i) => {\n      if (line === '\\n') return ''; // preserve empty lines\n      return ((i > 0) ? indentString : '') + line.trimEnd();\n    }).join('\\n');\n  }\n}\n\nexports.Help = Help;\n","const { InvalidArgumentError } = require('./error.js');\n\n// @ts-check\n\nclass Option {\n  /**\n   * Initialize a new `Option` with the given `flags` and `description`.\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   */\n\n  constructor(flags, description) {\n    this.flags = flags;\n    this.description = description || '';\n\n    this.required = flags.includes('<'); // A value must be supplied when the option is specified.\n    this.optional = flags.includes('['); // A value is optional when the option is specified.\n    // variadic test ignores <value,...> et al which might be used to describe custom splitting of single argument\n    this.variadic = /\\w\\.\\.\\.[>\\]]$/.test(flags); // The option can take multiple values.\n    this.mandatory = false; // The option must have a value after parsing, which usually means it must be specified on command line.\n    const optionFlags = splitOptionFlags(flags);\n    this.short = optionFlags.shortFlag;\n    this.long = optionFlags.longFlag;\n    this.negate = false;\n    if (this.long) {\n      this.negate = this.long.startsWith('--no-');\n    }\n    this.defaultValue = undefined;\n    this.defaultValueDescription = undefined;\n    this.presetArg = undefined;\n    this.envVar = undefined;\n    this.parseArg = undefined;\n    this.hidden = false;\n    this.argChoices = undefined;\n    this.conflictsWith = [];\n    this.implied = undefined;\n  }\n\n  /**\n   * Set the default value, and optionally supply the description to be displayed in the help.\n   *\n   * @param {any} value\n   * @param {string} [description]\n   * @return {Option}\n   */\n\n  default(value, description) {\n    this.defaultValue = value;\n    this.defaultValueDescription = description;\n    return this;\n  }\n\n  /**\n   * Preset to use when option used without option-argument, especially optional but also boolean and negated.\n   * The custom processing (parseArg) is called.\n   *\n   * @example\n   * new Option('--color').default('GREYSCALE').preset('RGB');\n   * new Option('--donate [amount]').preset('20').argParser(parseFloat);\n   *\n   * @param {any} arg\n   * @return {Option}\n   */\n\n  preset(arg) {\n    this.presetArg = arg;\n    return this;\n  }\n\n  /**\n   * Add option name(s) that conflict with this option.\n   * An error will be displayed if conflicting options are found during parsing.\n   *\n   * @example\n   * new Option('--rgb').conflicts('cmyk');\n   * new Option('--js').conflicts(['ts', 'jsx']);\n   *\n   * @param {string | string[]} names\n   * @return {Option}\n   */\n\n  conflicts(names) {\n    this.conflictsWith = this.conflictsWith.concat(names);\n    return this;\n  }\n\n  /**\n   * Specify implied option values for when this option is set and the implied options are not.\n   *\n   * The custom processing (parseArg) is not called on the implied values.\n   *\n   * @example\n   * program\n   *   .addOption(new Option('--log', 'write logging information to file'))\n   *   .addOption(new Option('--trace', 'log extra details').implies({ log: 'trace.txt' }));\n   *\n   * @param {Object} impliedOptionValues\n   * @return {Option}\n   */\n  implies(impliedOptionValues) {\n    let newImplied = impliedOptionValues;\n    if (typeof impliedOptionValues === 'string') {\n      // string is not documented, but easy mistake and we can do what user probably intended.\n      newImplied = { [impliedOptionValues]: true };\n    }\n    this.implied = Object.assign(this.implied || {}, newImplied);\n    return this;\n  }\n\n  /**\n   * Set environment variable to check for option value.\n   *\n   * An environment variable is only used if when processed the current option value is\n   * undefined, or the source of the current value is 'default' or 'config' or 'env'.\n   *\n   * @param {string} name\n   * @return {Option}\n   */\n\n  env(name) {\n    this.envVar = name;\n    return this;\n  }\n\n  /**\n   * Set the custom handler for processing CLI option arguments into option values.\n   *\n   * @param {Function} [fn]\n   * @return {Option}\n   */\n\n  argParser(fn) {\n    this.parseArg = fn;\n    return this;\n  }\n\n  /**\n   * Whether the option is mandatory and must have a value after parsing.\n   *\n   * @param {boolean} [mandatory=true]\n   * @return {Option}\n   */\n\n  makeOptionMandatory(mandatory = true) {\n    this.mandatory = !!mandatory;\n    return this;\n  }\n\n  /**\n   * Hide option in help.\n   *\n   * @param {boolean} [hide=true]\n   * @return {Option}\n   */\n\n  hideHelp(hide = true) {\n    this.hidden = !!hide;\n    return this;\n  }\n\n  /**\n   * @api private\n   */\n\n  _concatValue(value, previous) {\n    if (previous === this.defaultValue || !Array.isArray(previous)) {\n      return [value];\n    }\n\n    return previous.concat(value);\n  }\n\n  /**\n   * Only allow option value to be one of choices.\n   *\n   * @param {string[]} values\n   * @return {Option}\n   */\n\n  choices(values) {\n    this.argChoices = values.slice();\n    this.parseArg = (arg, previous) => {\n      if (!this.argChoices.includes(arg)) {\n        throw new InvalidArgumentError(`Allowed choices are ${this.argChoices.join(', ')}.`);\n      }\n      if (this.variadic) {\n        return this._concatValue(arg, previous);\n      }\n      return arg;\n    };\n    return this;\n  }\n\n  /**\n   * Return option name.\n   *\n   * @return {string}\n   */\n\n  name() {\n    if (this.long) {\n      return this.long.replace(/^--/, '');\n    }\n    return this.short.replace(/^-/, '');\n  }\n\n  /**\n   * Return option name, in a camelcase format that can be used\n   * as a object attribute key.\n   *\n   * @return {string}\n   * @api private\n   */\n\n  attributeName() {\n    return camelcase(this.name().replace(/^no-/, ''));\n  }\n\n  /**\n   * Check if `arg` matches the short or long flag.\n   *\n   * @param {string} arg\n   * @return {boolean}\n   * @api private\n   */\n\n  is(arg) {\n    return this.short === arg || this.long === arg;\n  }\n\n  /**\n   * Return whether a boolean option.\n   *\n   * Options are one of boolean, negated, required argument, or optional argument.\n   *\n   * @return {boolean}\n   * @api private\n   */\n\n  isBoolean() {\n    return !this.required && !this.optional && !this.negate;\n  }\n}\n\n/**\n * This class is to make it easier to work with dual options, without changing the existing\n * implementation. We support separate dual options for separate positive and negative options,\n * like `--build` and `--no-build`, which share a single option value. This works nicely for some\n * use cases, but is tricky for others where we want separate behaviours despite\n * the single shared option value.\n */\nclass DualOptions {\n  /**\n   * @param {Option[]} options\n   */\n  constructor(options) {\n    this.positiveOptions = new Map();\n    this.negativeOptions = new Map();\n    this.dualOptions = new Set();\n    options.forEach(option => {\n      if (option.negate) {\n        this.negativeOptions.set(option.attributeName(), option);\n      } else {\n        this.positiveOptions.set(option.attributeName(), option);\n      }\n    });\n    this.negativeOptions.forEach((value, key) => {\n      if (this.positiveOptions.has(key)) {\n        this.dualOptions.add(key);\n      }\n    });\n  }\n\n  /**\n   * Did the value come from the option, and not from possible matching dual option?\n   *\n   * @param {any} value\n   * @param {Option} option\n   * @returns {boolean}\n   */\n  valueFromOption(value, option) {\n    const optionKey = option.attributeName();\n    if (!this.dualOptions.has(optionKey)) return true;\n\n    // Use the value to deduce if (probably) came from the option.\n    const preset = this.negativeOptions.get(optionKey).presetArg;\n    const negativeValue = (preset !== undefined) ? preset : false;\n    return option.negate === (negativeValue === value);\n  }\n}\n\n/**\n * Convert string from kebab-case to camelCase.\n *\n * @param {string} str\n * @return {string}\n * @api private\n */\n\nfunction camelcase(str) {\n  return str.split('-').reduce((str, word) => {\n    return str + word[0].toUpperCase() + word.slice(1);\n  });\n}\n\n/**\n * Split the short and long flag out of something like '-m,--mixed <value>'\n *\n * @api private\n */\n\nfunction splitOptionFlags(flags) {\n  let shortFlag;\n  let longFlag;\n  // Use original very loose parsing to maintain backwards compatibility for now,\n  // which allowed for example unintended `-sw, --short-word` [sic].\n  const flagParts = flags.split(/[ |,]+/);\n  if (flagParts.length > 1 && !/^[[<]/.test(flagParts[1])) shortFlag = flagParts.shift();\n  longFlag = flagParts.shift();\n  // Add support for lone short flag without significantly changing parsing!\n  if (!shortFlag && /^-[^-]$/.test(longFlag)) {\n    shortFlag = longFlag;\n    longFlag = undefined;\n  }\n  return { shortFlag, longFlag };\n}\n\nexports.Option = Option;\nexports.splitOptionFlags = splitOptionFlags;\nexports.DualOptions = DualOptions;\n","const maxDistance = 3;\n\nfunction editDistance(a, b) {\n  // https://en.wikipedia.org/wiki/Damerau–Levenshtein_distance\n  // Calculating optimal string alignment distance, no substring is edited more than once.\n  // (Simple implementation.)\n\n  // Quick early exit, return worst case.\n  if (Math.abs(a.length - b.length) > maxDistance) return Math.max(a.length, b.length);\n\n  // distance between prefix substrings of a and b\n  const d = [];\n\n  // pure deletions turn a into empty string\n  for (let i = 0; i <= a.length; i++) {\n    d[i] = [i];\n  }\n  // pure insertions turn empty string into b\n  for (let j = 0; j <= b.length; j++) {\n    d[0][j] = j;\n  }\n\n  // fill matrix\n  for (let j = 1; j <= b.length; j++) {\n    for (let i = 1; i <= a.length; i++) {\n      let cost = 1;\n      if (a[i - 1] === b[j - 1]) {\n        cost = 0;\n      } else {\n        cost = 1;\n      }\n      d[i][j] = Math.min(\n        d[i - 1][j] + 1, // deletion\n        d[i][j - 1] + 1, // insertion\n        d[i - 1][j - 1] + cost // substitution\n      );\n      // transposition\n      if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {\n        d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + 1);\n      }\n    }\n  }\n\n  return d[a.length][b.length];\n}\n\n/**\n * Find close matches, restricted to same number of edits.\n *\n * @param {string} word\n * @param {string[]} candidates\n * @returns {string}\n */\n\nfunction suggestSimilar(word, candidates) {\n  if (!candidates || candidates.length === 0) return '';\n  // remove possible duplicates\n  candidates = Array.from(new Set(candidates));\n\n  const searchingOptions = word.startsWith('--');\n  if (searchingOptions) {\n    word = word.slice(2);\n    candidates = candidates.map(candidate => candidate.slice(2));\n  }\n\n  let similar = [];\n  let bestDistance = maxDistance;\n  const minSimilarity = 0.4;\n  candidates.forEach((candidate) => {\n    if (candidate.length <= 1) return; // no one character guesses\n\n    const distance = editDistance(word, candidate);\n    const length = Math.max(word.length, candidate.length);\n    const similarity = (length - distance) / length;\n    if (similarity > minSimilarity) {\n      if (distance < bestDistance) {\n        // better edit distance, throw away previous worse matches\n        bestDistance = distance;\n        similar = [candidate];\n      } else if (distance === bestDistance) {\n        similar.push(candidate);\n      }\n    }\n  });\n\n  similar.sort((a, b) => a.localeCompare(b));\n  if (searchingOptions) {\n    similar = similar.map(candidate => `--${candidate}`);\n  }\n\n  if (similar.length > 1) {\n    return `\\n(Did you mean one of ${similar.join(', ')}?)`;\n  }\n  if (similar.length === 1) {\n    return `\\n(Did you mean ${similar[0]}?)`;\n  }\n  return '';\n}\n\nexports.suggestSimilar = suggestSimilar;\n","const EventEmitter = require('events').EventEmitter;\nconst childProcess = require('child_process');\nconst path = require('path');\nconst fs = require('fs');\nconst process = require('process');\n\nconst { Argument, humanReadableArgName } = require('./argument.js');\nconst { CommanderError } = require('./error.js');\nconst { Help } = require('./help.js');\nconst { Option, splitOptionFlags, DualOptions } = require('./option.js');\nconst { suggestSimilar } = require('./suggestSimilar');\n\n// @ts-check\n\nclass Command extends EventEmitter {\n  /**\n   * Initialize a new `Command`.\n   *\n   * @param {string} [name]\n   */\n\n  constructor(name) {\n    super();\n    /** @type {Command[]} */\n    this.commands = [];\n    /** @type {Option[]} */\n    this.options = [];\n    this.parent = null;\n    this._allowUnknownOption = false;\n    this._allowExcessArguments = true;\n    /** @type {Argument[]} */\n    this._args = [];\n    /** @type {string[]} */\n    this.args = []; // cli args with options removed\n    this.rawArgs = [];\n    this.processedArgs = []; // like .args but after custom processing and collecting variadic\n    this._scriptPath = null;\n    this._name = name || '';\n    this._optionValues = {};\n    this._optionValueSources = {}; // default, env, cli etc\n    this._storeOptionsAsProperties = false;\n    this._actionHandler = null;\n    this._executableHandler = false;\n    this._executableFile = null; // custom name for executable\n    this._executableDir = null; // custom search directory for subcommands\n    this._defaultCommandName = null;\n    this._exitCallback = null;\n    this._aliases = [];\n    this._combineFlagAndOptionalValue = true;\n    this._description = '';\n    this._summary = '';\n    this._argsDescription = undefined; // legacy\n    this._enablePositionalOptions = false;\n    this._passThroughOptions = false;\n    this._lifeCycleHooks = {}; // a hash of arrays\n    /** @type {boolean | string} */\n    this._showHelpAfterError = false;\n    this._showSuggestionAfterError = true;\n\n    // see .configureOutput() for docs\n    this._outputConfiguration = {\n      writeOut: (str) => process.stdout.write(str),\n      writeErr: (str) => process.stderr.write(str),\n      getOutHelpWidth: () => process.stdout.isTTY ? process.stdout.columns : undefined,\n      getErrHelpWidth: () => process.stderr.isTTY ? process.stderr.columns : undefined,\n      outputError: (str, write) => write(str)\n    };\n\n    this._hidden = false;\n    this._hasHelpOption = true;\n    this._helpFlags = '-h, --help';\n    this._helpDescription = 'display help for command';\n    this._helpShortFlag = '-h';\n    this._helpLongFlag = '--help';\n    this._addImplicitHelpCommand = undefined; // Deliberately undefined, not decided whether true or false\n    this._helpCommandName = 'help';\n    this._helpCommandnameAndArgs = 'help [command]';\n    this._helpCommandDescription = 'display help for command';\n    this._helpConfiguration = {};\n  }\n\n  /**\n   * Copy settings that are useful to have in common across root command and subcommands.\n   *\n   * (Used internally when adding a command using `.command()` so subcommands inherit parent settings.)\n   *\n   * @param {Command} sourceCommand\n   * @return {Command} `this` command for chaining\n   */\n  copyInheritedSettings(sourceCommand) {\n    this._outputConfiguration = sourceCommand._outputConfiguration;\n    this._hasHelpOption = sourceCommand._hasHelpOption;\n    this._helpFlags = sourceCommand._helpFlags;\n    this._helpDescription = sourceCommand._helpDescription;\n    this._helpShortFlag = sourceCommand._helpShortFlag;\n    this._helpLongFlag = sourceCommand._helpLongFlag;\n    this._helpCommandName = sourceCommand._helpCommandName;\n    this._helpCommandnameAndArgs = sourceCommand._helpCommandnameAndArgs;\n    this._helpCommandDescription = sourceCommand._helpCommandDescription;\n    this._helpConfiguration = sourceCommand._helpConfiguration;\n    this._exitCallback = sourceCommand._exitCallback;\n    this._storeOptionsAsProperties = sourceCommand._storeOptionsAsProperties;\n    this._combineFlagAndOptionalValue = sourceCommand._combineFlagAndOptionalValue;\n    this._allowExcessArguments = sourceCommand._allowExcessArguments;\n    this._enablePositionalOptions = sourceCommand._enablePositionalOptions;\n    this._showHelpAfterError = sourceCommand._showHelpAfterError;\n    this._showSuggestionAfterError = sourceCommand._showSuggestionAfterError;\n\n    return this;\n  }\n\n  /**\n   * Define a command.\n   *\n   * There are two styles of command: pay attention to where to put the description.\n   *\n   * @example\n   * // Command implemented using action handler (description is supplied separately to `.command`)\n   * program\n   *   .command('clone <source> [destination]')\n   *   .description('clone a repository into a newly created directory')\n   *   .action((source, destination) => {\n   *     console.log('clone command called');\n   *   });\n   *\n   * // Command implemented using separate executable file (description is second parameter to `.command`)\n   * program\n   *   .command('start <service>', 'start named service')\n   *   .command('stop [service]', 'stop named service, or all if no name supplied');\n   *\n   * @param {string} nameAndArgs - command name and arguments, args are `<required>` or `[optional]` and last may also be `variadic...`\n   * @param {Object|string} [actionOptsOrExecDesc] - configuration options (for action), or description (for executable)\n   * @param {Object} [execOpts] - configuration options (for executable)\n   * @return {Command} returns new command for action handler, or `this` for executable command\n   */\n\n  command(nameAndArgs, actionOptsOrExecDesc, execOpts) {\n    let desc = actionOptsOrExecDesc;\n    let opts = execOpts;\n    if (typeof desc === 'object' && desc !== null) {\n      opts = desc;\n      desc = null;\n    }\n    opts = opts || {};\n    const [, name, args] = nameAndArgs.match(/([^ ]+) *(.*)/);\n\n    const cmd = this.createCommand(name);\n    if (desc) {\n      cmd.description(desc);\n      cmd._executableHandler = true;\n    }\n    if (opts.isDefault) this._defaultCommandName = cmd._name;\n    cmd._hidden = !!(opts.noHelp || opts.hidden); // noHelp is deprecated old name for hidden\n    cmd._executableFile = opts.executableFile || null; // Custom name for executable file, set missing to null to match constructor\n    if (args) cmd.arguments(args);\n    this.commands.push(cmd);\n    cmd.parent = this;\n    cmd.copyInheritedSettings(this);\n\n    if (desc) return this;\n    return cmd;\n  }\n\n  /**\n   * Factory routine to create a new unattached command.\n   *\n   * See .command() for creating an attached subcommand, which uses this routine to\n   * create the command. You can override createCommand to customise subcommands.\n   *\n   * @param {string} [name]\n   * @return {Command} new command\n   */\n\n  createCommand(name) {\n    return new Command(name);\n  }\n\n  /**\n   * You can customise the help with a subclass of Help by overriding createHelp,\n   * or by overriding Help properties using configureHelp().\n   *\n   * @return {Help}\n   */\n\n  createHelp() {\n    return Object.assign(new Help(), this.configureHelp());\n  }\n\n  /**\n   * You can customise the help by overriding Help properties using configureHelp(),\n   * or with a subclass of Help by overriding createHelp().\n   *\n   * @param {Object} [configuration] - configuration options\n   * @return {Command|Object} `this` command for chaining, or stored configuration\n   */\n\n  configureHelp(configuration) {\n    if (configuration === undefined) return this._helpConfiguration;\n\n    this._helpConfiguration = configuration;\n    return this;\n  }\n\n  /**\n   * The default output goes to stdout and stderr. You can customise this for special\n   * applications. You can also customise the display of errors by overriding outputError.\n   *\n   * The configuration properties are all functions:\n   *\n   *     // functions to change where being written, stdout and stderr\n   *     writeOut(str)\n   *     writeErr(str)\n   *     // matching functions to specify width for wrapping help\n   *     getOutHelpWidth()\n   *     getErrHelpWidth()\n   *     // functions based on what is being written out\n   *     outputError(str, write) // used for displaying errors, and not used for displaying help\n   *\n   * @param {Object} [configuration] - configuration options\n   * @return {Command|Object} `this` command for chaining, or stored configuration\n   */\n\n  configureOutput(configuration) {\n    if (configuration === undefined) return this._outputConfiguration;\n\n    Object.assign(this._outputConfiguration, configuration);\n    return this;\n  }\n\n  /**\n   * Display the help or a custom message after an error occurs.\n   *\n   * @param {boolean|string} [displayHelp]\n   * @return {Command} `this` command for chaining\n   */\n  showHelpAfterError(displayHelp = true) {\n    if (typeof displayHelp !== 'string') displayHelp = !!displayHelp;\n    this._showHelpAfterError = displayHelp;\n    return this;\n  }\n\n  /**\n   * Display suggestion of similar commands for unknown commands, or options for unknown options.\n   *\n   * @param {boolean} [displaySuggestion]\n   * @return {Command} `this` command for chaining\n   */\n  showSuggestionAfterError(displaySuggestion = true) {\n    this._showSuggestionAfterError = !!displaySuggestion;\n    return this;\n  }\n\n  /**\n   * Add a prepared subcommand.\n   *\n   * See .command() for creating an attached subcommand which inherits settings from its parent.\n   *\n   * @param {Command} cmd - new subcommand\n   * @param {Object} [opts] - configuration options\n   * @return {Command} `this` command for chaining\n   */\n\n  addCommand(cmd, opts) {\n    if (!cmd._name) {\n      throw new Error(`Command passed to .addCommand() must have a name\n- specify the name in Command constructor or using .name()`);\n    }\n\n    opts = opts || {};\n    if (opts.isDefault) this._defaultCommandName = cmd._name;\n    if (opts.noHelp || opts.hidden) cmd._hidden = true; // modifying passed command due to existing implementation\n\n    this.commands.push(cmd);\n    cmd.parent = this;\n    return this;\n  }\n\n  /**\n   * Factory routine to create a new unattached argument.\n   *\n   * See .argument() for creating an attached argument, which uses this routine to\n   * create the argument. You can override createArgument to return a custom argument.\n   *\n   * @param {string} name\n   * @param {string} [description]\n   * @return {Argument} new argument\n   */\n\n  createArgument(name, description) {\n    return new Argument(name, description);\n  }\n\n  /**\n   * Define argument syntax for command.\n   *\n   * The default is that the argument is required, and you can explicitly\n   * indicate this with <> around the name. Put [] around the name for an optional argument.\n   *\n   * @example\n   * program.argument('<input-file>');\n   * program.argument('[output-file]');\n   *\n   * @param {string} name\n   * @param {string} [description]\n   * @param {Function|*} [fn] - custom argument processing function\n   * @param {*} [defaultValue]\n   * @return {Command} `this` command for chaining\n   */\n  argument(name, description, fn, defaultValue) {\n    const argument = this.createArgument(name, description);\n    if (typeof fn === 'function') {\n      argument.default(defaultValue).argParser(fn);\n    } else {\n      argument.default(fn);\n    }\n    this.addArgument(argument);\n    return this;\n  }\n\n  /**\n   * Define argument syntax for command, adding multiple at once (without descriptions).\n   *\n   * See also .argument().\n   *\n   * @example\n   * program.arguments('<cmd> [env]');\n   *\n   * @param {string} names\n   * @return {Command} `this` command for chaining\n   */\n\n  arguments(names) {\n    names.trim().split(/ +/).forEach((detail) => {\n      this.argument(detail);\n    });\n    return this;\n  }\n\n  /**\n   * Define argument syntax for command, adding a prepared argument.\n   *\n   * @param {Argument} argument\n   * @return {Command} `this` command for chaining\n   */\n  addArgument(argument) {\n    const previousArgument = this._args.slice(-1)[0];\n    if (previousArgument && previousArgument.variadic) {\n      throw new Error(`only the last argument can be variadic '${previousArgument.name()}'`);\n    }\n    if (argument.required && argument.defaultValue !== undefined && argument.parseArg === undefined) {\n      throw new Error(`a default value for a required argument is never used: '${argument.name()}'`);\n    }\n    this._args.push(argument);\n    return this;\n  }\n\n  /**\n   * Override default decision whether to add implicit help command.\n   *\n   *    addHelpCommand() // force on\n   *    addHelpCommand(false); // force off\n   *    addHelpCommand('help [cmd]', 'display help for [cmd]'); // force on with custom details\n   *\n   * @return {Command} `this` command for chaining\n   */\n\n  addHelpCommand(enableOrNameAndArgs, description) {\n    if (enableOrNameAndArgs === false) {\n      this._addImplicitHelpCommand = false;\n    } else {\n      this._addImplicitHelpCommand = true;\n      if (typeof enableOrNameAndArgs === 'string') {\n        this._helpCommandName = enableOrNameAndArgs.split(' ')[0];\n        this._helpCommandnameAndArgs = enableOrNameAndArgs;\n      }\n      this._helpCommandDescription = description || this._helpCommandDescription;\n    }\n    return this;\n  }\n\n  /**\n   * @return {boolean}\n   * @api private\n   */\n\n  _hasImplicitHelpCommand() {\n    if (this._addImplicitHelpCommand === undefined) {\n      return this.commands.length && !this._actionHandler && !this._findCommand('help');\n    }\n    return this._addImplicitHelpCommand;\n  }\n\n  /**\n   * Add hook for life cycle event.\n   *\n   * @param {string} event\n   * @param {Function} listener\n   * @return {Command} `this` command for chaining\n   */\n\n  hook(event, listener) {\n    const allowedValues = ['preSubcommand', 'preAction', 'postAction'];\n    if (!allowedValues.includes(event)) {\n      throw new Error(`Unexpected value for event passed to hook : '${event}'.\nExpecting one of '${allowedValues.join(\"', '\")}'`);\n    }\n    if (this._lifeCycleHooks[event]) {\n      this._lifeCycleHooks[event].push(listener);\n    } else {\n      this._lifeCycleHooks[event] = [listener];\n    }\n    return this;\n  }\n\n  /**\n   * Register callback to use as replacement for calling process.exit.\n   *\n   * @param {Function} [fn] optional callback which will be passed a CommanderError, defaults to throwing\n   * @return {Command} `this` command for chaining\n   */\n\n  exitOverride(fn) {\n    if (fn) {\n      this._exitCallback = fn;\n    } else {\n      this._exitCallback = (err) => {\n        if (err.code !== 'commander.executeSubCommandAsync') {\n          throw err;\n        } else {\n          // Async callback from spawn events, not useful to throw.\n        }\n      };\n    }\n    return this;\n  }\n\n  /**\n   * Call process.exit, and _exitCallback if defined.\n   *\n   * @param {number} exitCode exit code for using with process.exit\n   * @param {string} code an id string representing the error\n   * @param {string} message human-readable description of the error\n   * @return never\n   * @api private\n   */\n\n  _exit(exitCode, code, message) {\n    if (this._exitCallback) {\n      this._exitCallback(new CommanderError(exitCode, code, message));\n      // Expecting this line is not reached.\n    }\n    process.exit(exitCode);\n  }\n\n  /**\n   * Register callback `fn` for the command.\n   *\n   * @example\n   * program\n   *   .command('serve')\n   *   .description('start service')\n   *   .action(function() {\n   *      // do work here\n   *   });\n   *\n   * @param {Function} fn\n   * @return {Command} `this` command for chaining\n   */\n\n  action(fn) {\n    const listener = (args) => {\n      // The .action callback takes an extra parameter which is the command or options.\n      const expectedArgsCount = this._args.length;\n      const actionArgs = args.slice(0, expectedArgsCount);\n      if (this._storeOptionsAsProperties) {\n        actionArgs[expectedArgsCount] = this; // backwards compatible \"options\"\n      } else {\n        actionArgs[expectedArgsCount] = this.opts();\n      }\n      actionArgs.push(this);\n\n      return fn.apply(this, actionArgs);\n    };\n    this._actionHandler = listener;\n    return this;\n  }\n\n  /**\n   * Factory routine to create a new unattached option.\n   *\n   * See .option() for creating an attached option, which uses this routine to\n   * create the option. You can override createOption to return a custom option.\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   * @return {Option} new option\n   */\n\n  createOption(flags, description) {\n    return new Option(flags, description);\n  }\n\n  /**\n   * Add an option.\n   *\n   * @param {Option} option\n   * @return {Command} `this` command for chaining\n   */\n  addOption(option) {\n    const oname = option.name();\n    const name = option.attributeName();\n\n    // store default value\n    if (option.negate) {\n      // --no-foo is special and defaults foo to true, unless a --foo option is already defined\n      const positiveLongFlag = option.long.replace(/^--no-/, '--');\n      if (!this._findOption(positiveLongFlag)) {\n        this.setOptionValueWithSource(name, option.defaultValue === undefined ? true : option.defaultValue, 'default');\n      }\n    } else if (option.defaultValue !== undefined) {\n      this.setOptionValueWithSource(name, option.defaultValue, 'default');\n    }\n\n    // register the option\n    this.options.push(option);\n\n    // handler for cli and env supplied values\n    const handleOptionValue = (val, invalidValueMessage, valueSource) => {\n      // val is null for optional option used without an optional-argument.\n      // val is undefined for boolean and negated option.\n      if (val == null && option.presetArg !== undefined) {\n        val = option.presetArg;\n      }\n\n      // custom processing\n      const oldValue = this.getOptionValue(name);\n      if (val !== null && option.parseArg) {\n        try {\n          val = option.parseArg(val, oldValue);\n        } catch (err) {\n          if (err.code === 'commander.invalidArgument') {\n            const message = `${invalidValueMessage} ${err.message}`;\n            this.error(message, { exitCode: err.exitCode, code: err.code });\n          }\n          throw err;\n        }\n      } else if (val !== null && option.variadic) {\n        val = option._concatValue(val, oldValue);\n      }\n\n      // Fill-in appropriate missing values. Long winded but easy to follow.\n      if (val == null) {\n        if (option.negate) {\n          val = false;\n        } else if (option.isBoolean() || option.optional) {\n          val = true;\n        } else {\n          val = ''; // not normal, parseArg might have failed or be a mock function for testing\n        }\n      }\n      this.setOptionValueWithSource(name, val, valueSource);\n    };\n\n    this.on('option:' + oname, (val) => {\n      const invalidValueMessage = `error: option '${option.flags}' argument '${val}' is invalid.`;\n      handleOptionValue(val, invalidValueMessage, 'cli');\n    });\n\n    if (option.envVar) {\n      this.on('optionEnv:' + oname, (val) => {\n        const invalidValueMessage = `error: option '${option.flags}' value '${val}' from env '${option.envVar}' is invalid.`;\n        handleOptionValue(val, invalidValueMessage, 'env');\n      });\n    }\n\n    return this;\n  }\n\n  /**\n   * Internal implementation shared by .option() and .requiredOption()\n   *\n   * @api private\n   */\n  _optionEx(config, flags, description, fn, defaultValue) {\n    if (typeof flags === 'object' && flags instanceof Option) {\n      throw new Error('To add an Option object use addOption() instead of option() or requiredOption()');\n    }\n    const option = this.createOption(flags, description);\n    option.makeOptionMandatory(!!config.mandatory);\n    if (typeof fn === 'function') {\n      option.default(defaultValue).argParser(fn);\n    } else if (fn instanceof RegExp) {\n      // deprecated\n      const regex = fn;\n      fn = (val, def) => {\n        const m = regex.exec(val);\n        return m ? m[0] : def;\n      };\n      option.default(defaultValue).argParser(fn);\n    } else {\n      option.default(fn);\n    }\n\n    return this.addOption(option);\n  }\n\n  /**\n   * Define option with `flags`, `description` and optional\n   * coercion `fn`.\n   *\n   * The `flags` string contains the short and/or long flags,\n   * separated by comma, a pipe or space. The following are all valid\n   * all will output this way when `--help` is used.\n   *\n   *     \"-p, --pepper\"\n   *     \"-p|--pepper\"\n   *     \"-p --pepper\"\n   *\n   * @example\n   * // simple boolean defaulting to undefined\n   * program.option('-p, --pepper', 'add pepper');\n   *\n   * program.pepper\n   * // => undefined\n   *\n   * --pepper\n   * program.pepper\n   * // => true\n   *\n   * // simple boolean defaulting to true (unless non-negated option is also defined)\n   * program.option('-C, --no-cheese', 'remove cheese');\n   *\n   * program.cheese\n   * // => true\n   *\n   * --no-cheese\n   * program.cheese\n   * // => false\n   *\n   * // required argument\n   * program.option('-C, --chdir <path>', 'change the working directory');\n   *\n   * --chdir /tmp\n   * program.chdir\n   * // => \"/tmp\"\n   *\n   * // optional argument\n   * program.option('-c, --cheese [type]', 'add cheese [marble]');\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   * @param {Function|*} [fn] - custom option processing function or default value\n   * @param {*} [defaultValue]\n   * @return {Command} `this` command for chaining\n   */\n\n  option(flags, description, fn, defaultValue) {\n    return this._optionEx({}, flags, description, fn, defaultValue);\n  }\n\n  /**\n  * Add a required option which must have a value after parsing. This usually means\n  * the option must be specified on the command line. (Otherwise the same as .option().)\n  *\n  * The `flags` string contains the short and/or long flags, separated by comma, a pipe or space.\n  *\n  * @param {string} flags\n  * @param {string} [description]\n  * @param {Function|*} [fn] - custom option processing function or default value\n  * @param {*} [defaultValue]\n  * @return {Command} `this` command for chaining\n  */\n\n  requiredOption(flags, description, fn, defaultValue) {\n    return this._optionEx({ mandatory: true }, flags, description, fn, defaultValue);\n  }\n\n  /**\n   * Alter parsing of short flags with optional values.\n   *\n   * @example\n   * // for `.option('-f,--flag [value]'):\n   * program.combineFlagAndOptionalValue(true);  // `-f80` is treated like `--flag=80`, this is the default behaviour\n   * program.combineFlagAndOptionalValue(false) // `-fb` is treated like `-f -b`\n   *\n   * @param {Boolean} [combine=true] - if `true` or omitted, an optional value can be specified directly after the flag.\n   */\n  combineFlagAndOptionalValue(combine = true) {\n    this._combineFlagAndOptionalValue = !!combine;\n    return this;\n  }\n\n  /**\n   * Allow unknown options on the command line.\n   *\n   * @param {Boolean} [allowUnknown=true] - if `true` or omitted, no error will be thrown\n   * for unknown options.\n   */\n  allowUnknownOption(allowUnknown = true) {\n    this._allowUnknownOption = !!allowUnknown;\n    return this;\n  }\n\n  /**\n   * Allow excess command-arguments on the command line. Pass false to make excess arguments an error.\n   *\n   * @param {Boolean} [allowExcess=true] - if `true` or omitted, no error will be thrown\n   * for excess arguments.\n   */\n  allowExcessArguments(allowExcess = true) {\n    this._allowExcessArguments = !!allowExcess;\n    return this;\n  }\n\n  /**\n   * Enable positional options. Positional means global options are specified before subcommands which lets\n   * subcommands reuse the same option names, and also enables subcommands to turn on passThroughOptions.\n   * The default behaviour is non-positional and global options may appear anywhere on the command line.\n   *\n   * @param {Boolean} [positional=true]\n   */\n  enablePositionalOptions(positional = true) {\n    this._enablePositionalOptions = !!positional;\n    return this;\n  }\n\n  /**\n   * Pass through options that come after command-arguments rather than treat them as command-options,\n   * so actual command-options come before command-arguments. Turning this on for a subcommand requires\n   * positional options to have been enabled on the program (parent commands).\n   * The default behaviour is non-positional and options may appear before or after command-arguments.\n   *\n   * @param {Boolean} [passThrough=true]\n   * for unknown options.\n   */\n  passThroughOptions(passThrough = true) {\n    this._passThroughOptions = !!passThrough;\n    if (!!this.parent && passThrough && !this.parent._enablePositionalOptions) {\n      throw new Error('passThroughOptions can not be used without turning on enablePositionalOptions for parent command(s)');\n    }\n    return this;\n  }\n\n  /**\n    * Whether to store option values as properties on command object,\n    * or store separately (specify false). In both cases the option values can be accessed using .opts().\n    *\n    * @param {boolean} [storeAsProperties=true]\n    * @return {Command} `this` command for chaining\n    */\n\n  storeOptionsAsProperties(storeAsProperties = true) {\n    this._storeOptionsAsProperties = !!storeAsProperties;\n    if (this.options.length) {\n      throw new Error('call .storeOptionsAsProperties() before adding options');\n    }\n    return this;\n  }\n\n  /**\n   * Retrieve option value.\n   *\n   * @param {string} key\n   * @return {Object} value\n   */\n\n  getOptionValue(key) {\n    if (this._storeOptionsAsProperties) {\n      return this[key];\n    }\n    return this._optionValues[key];\n  }\n\n  /**\n   * Store option value.\n   *\n   * @param {string} key\n   * @param {Object} value\n   * @return {Command} `this` command for chaining\n   */\n\n  setOptionValue(key, value) {\n    return this.setOptionValueWithSource(key, value, undefined);\n  }\n\n  /**\n    * Store option value and where the value came from.\n    *\n    * @param {string} key\n    * @param {Object} value\n    * @param {string} source - expected values are default/config/env/cli/implied\n    * @return {Command} `this` command for chaining\n    */\n\n  setOptionValueWithSource(key, value, source) {\n    if (this._storeOptionsAsProperties) {\n      this[key] = value;\n    } else {\n      this._optionValues[key] = value;\n    }\n    this._optionValueSources[key] = source;\n    return this;\n  }\n\n  /**\n    * Get source of option value.\n    * Expected values are default | config | env | cli | implied\n    *\n    * @param {string} key\n    * @return {string}\n    */\n\n  getOptionValueSource(key) {\n    return this._optionValueSources[key];\n  }\n\n  /**\n    * Get source of option value. See also .optsWithGlobals().\n    * Expected values are default | config | env | cli | implied\n    *\n    * @param {string} key\n    * @return {string}\n    */\n\n  getOptionValueSourceWithGlobals(key) {\n    // global overwrites local, like optsWithGlobals\n    let source;\n    getCommandAndParents(this).forEach((cmd) => {\n      if (cmd.getOptionValueSource(key) !== undefined) {\n        source = cmd.getOptionValueSource(key);\n      }\n    });\n    return source;\n  }\n\n  /**\n   * Get user arguments from implied or explicit arguments.\n   * Side-effects: set _scriptPath if args included script. Used for default program name, and subcommand searches.\n   *\n   * @api private\n   */\n\n  _prepareUserArgs(argv, parseOptions) {\n    if (argv !== undefined && !Array.isArray(argv)) {\n      throw new Error('first parameter to parse must be array or undefined');\n    }\n    parseOptions = parseOptions || {};\n\n    // Default to using process.argv\n    if (argv === undefined) {\n      argv = process.argv;\n      // @ts-ignore: unknown property\n      if (process.versions && process.versions.electron) {\n        parseOptions.from = 'electron';\n      }\n    }\n    this.rawArgs = argv.slice();\n\n    // make it a little easier for callers by supporting various argv conventions\n    let userArgs;\n    switch (parseOptions.from) {\n      case undefined:\n      case 'node':\n        this._scriptPath = argv[1];\n        userArgs = argv.slice(2);\n        break;\n      case 'electron':\n        // @ts-ignore: unknown property\n        if (process.defaultApp) {\n          this._scriptPath = argv[1];\n          userArgs = argv.slice(2);\n        } else {\n          userArgs = argv.slice(1);\n        }\n        break;\n      case 'user':\n        userArgs = argv.slice(0);\n        break;\n      default:\n        throw new Error(`unexpected parse option { from: '${parseOptions.from}' }`);\n    }\n\n    // Find default name for program from arguments.\n    if (!this._name && this._scriptPath) this.nameFromFilename(this._scriptPath);\n    this._name = this._name || 'program';\n\n    return userArgs;\n  }\n\n  /**\n   * Parse `argv`, setting options and invoking commands when defined.\n   *\n   * The default expectation is that the arguments are from node and have the application as argv[0]\n   * and the script being run in argv[1], with user parameters after that.\n   *\n   * @example\n   * program.parse(process.argv);\n   * program.parse(); // implicitly use process.argv and auto-detect node vs electron conventions\n   * program.parse(my-args, { from: 'user' }); // just user supplied arguments, nothing special about argv[0]\n   *\n   * @param {string[]} [argv] - optional, defaults to process.argv\n   * @param {Object} [parseOptions] - optionally specify style of options with from: node/user/electron\n   * @param {string} [parseOptions.from] - where the args are from: 'node', 'user', 'electron'\n   * @return {Command} `this` command for chaining\n   */\n\n  parse(argv, parseOptions) {\n    const userArgs = this._prepareUserArgs(argv, parseOptions);\n    this._parseCommand([], userArgs);\n\n    return this;\n  }\n\n  /**\n   * Parse `argv`, setting options and invoking commands when defined.\n   *\n   * Use parseAsync instead of parse if any of your action handlers are async. Returns a Promise.\n   *\n   * The default expectation is that the arguments are from node and have the application as argv[0]\n   * and the script being run in argv[1], with user parameters after that.\n   *\n   * @example\n   * await program.parseAsync(process.argv);\n   * await program.parseAsync(); // implicitly use process.argv and auto-detect node vs electron conventions\n   * await program.parseAsync(my-args, { from: 'user' }); // just user supplied arguments, nothing special about argv[0]\n   *\n   * @param {string[]} [argv]\n   * @param {Object} [parseOptions]\n   * @param {string} parseOptions.from - where the args are from: 'node', 'user', 'electron'\n   * @return {Promise}\n   */\n\n  async parseAsync(argv, parseOptions) {\n    const userArgs = this._prepareUserArgs(argv, parseOptions);\n    await this._parseCommand([], userArgs);\n\n    return this;\n  }\n\n  /**\n   * Execute a sub-command executable.\n   *\n   * @api private\n   */\n\n  _executeSubCommand(subcommand, args) {\n    args = args.slice();\n    let launchWithNode = false; // Use node for source targets so do not need to get permissions correct, and on Windows.\n    const sourceExt = ['.js', '.ts', '.tsx', '.mjs', '.cjs'];\n\n    function findFile(baseDir, baseName) {\n      // Look for specified file\n      const localBin = path.resolve(baseDir, baseName);\n      if (fs.existsSync(localBin)) return localBin;\n\n      // Stop looking if candidate already has an expected extension.\n      if (sourceExt.includes(path.extname(baseName))) return undefined;\n\n      // Try all the extensions.\n      const foundExt = sourceExt.find(ext => fs.existsSync(`${localBin}${ext}`));\n      if (foundExt) return `${localBin}${foundExt}`;\n\n      return undefined;\n    }\n\n    // Not checking for help first. Unlikely to have mandatory and executable, and can't robustly test for help flags in external command.\n    this._checkForMissingMandatoryOptions();\n    this._checkForConflictingOptions();\n\n    // executableFile and executableDir might be full path, or just a name\n    let executableFile = subcommand._executableFile || `${this._name}-${subcommand._name}`;\n    let executableDir = this._executableDir || '';\n    if (this._scriptPath) {\n      let resolvedScriptPath; // resolve possible symlink for installed npm binary\n      try {\n        resolvedScriptPath = fs.realpathSync(this._scriptPath);\n      } catch (err) {\n        resolvedScriptPath = this._scriptPath;\n      }\n      executableDir = path.resolve(path.dirname(resolvedScriptPath), executableDir);\n    }\n\n    // Look for a local file in preference to a command in PATH.\n    if (executableDir) {\n      let localFile = findFile(executableDir, executableFile);\n\n      // Legacy search using prefix of script name instead of command name\n      if (!localFile && !subcommand._executableFile && this._scriptPath) {\n        const legacyName = path.basename(this._scriptPath, path.extname(this._scriptPath));\n        if (legacyName !== this._name) {\n          localFile = findFile(executableDir, `${legacyName}-${subcommand._name}`);\n        }\n      }\n      executableFile = localFile || executableFile;\n    }\n\n    launchWithNode = sourceExt.includes(path.extname(executableFile));\n\n    let proc;\n    if (process.platform !== 'win32') {\n      if (launchWithNode) {\n        args.unshift(executableFile);\n        // add executable arguments to spawn\n        args = incrementNodeInspectorPort(process.execArgv).concat(args);\n\n        proc = childProcess.spawn(process.argv[0], args, { stdio: 'inherit' });\n      } else {\n        proc = childProcess.spawn(executableFile, args, { stdio: 'inherit' });\n      }\n    } else {\n      args.unshift(executableFile);\n      // add executable arguments to spawn\n      args = incrementNodeInspectorPort(process.execArgv).concat(args);\n      proc = childProcess.spawn(process.execPath, args, { stdio: 'inherit' });\n    }\n\n    if (!proc.killed) { // testing mainly to avoid leak warnings during unit tests with mocked spawn\n      const signals = ['SIGUSR1', 'SIGUSR2', 'SIGTERM', 'SIGINT', 'SIGHUP'];\n      signals.forEach((signal) => {\n        // @ts-ignore\n        process.on(signal, () => {\n          if (proc.killed === false && proc.exitCode === null) {\n            proc.kill(signal);\n          }\n        });\n      });\n    }\n\n    // By default terminate process when spawned process terminates.\n    // Suppressing the exit if exitCallback defined is a bit messy and of limited use, but does allow process to stay running!\n    const exitCallback = this._exitCallback;\n    if (!exitCallback) {\n      proc.on('close', process.exit.bind(process));\n    } else {\n      proc.on('close', () => {\n        exitCallback(new CommanderError(process.exitCode || 0, 'commander.executeSubCommandAsync', '(close)'));\n      });\n    }\n    proc.on('error', (err) => {\n      // @ts-ignore\n      if (err.code === 'ENOENT') {\n        const executableDirMessage = executableDir\n          ? `searched for local subcommand relative to directory '${executableDir}'`\n          : 'no directory for search for local subcommand, use .executableDir() to supply a custom directory';\n        const executableMissing = `'${executableFile}' does not exist\n - if '${subcommand._name}' is not meant to be an executable command, remove description parameter from '.command()' and use '.description()' instead\n - if the default executable name is not suitable, use the executableFile option to supply a custom name or path\n - ${executableDirMessage}`;\n        throw new Error(executableMissing);\n      // @ts-ignore\n      } else if (err.code === 'EACCES') {\n        throw new Error(`'${executableFile}' not executable`);\n      }\n      if (!exitCallback) {\n        process.exit(1);\n      } else {\n        const wrappedError = new CommanderError(1, 'commander.executeSubCommandAsync', '(error)');\n        wrappedError.nestedError = err;\n        exitCallback(wrappedError);\n      }\n    });\n\n    // Store the reference to the child process\n    this.runningCommand = proc;\n  }\n\n  /**\n   * @api private\n   */\n\n  _dispatchSubcommand(commandName, operands, unknown) {\n    const subCommand = this._findCommand(commandName);\n    if (!subCommand) this.help({ error: true });\n\n    let hookResult;\n    hookResult = this._chainOrCallSubCommandHook(hookResult, subCommand, 'preSubcommand');\n    hookResult = this._chainOrCall(hookResult, () => {\n      if (subCommand._executableHandler) {\n        this._executeSubCommand(subCommand, operands.concat(unknown));\n      } else {\n        return subCommand._parseCommand(operands, unknown);\n      }\n    });\n    return hookResult;\n  }\n\n  /**\n   * Invoke help directly if possible, or dispatch if necessary.\n   * e.g. help foo\n   *\n   * @api private\n   */\n\n  _dispatchHelpCommand(subcommandName) {\n    if (!subcommandName) {\n      this.help();\n    }\n    const subCommand = this._findCommand(subcommandName);\n    if (subCommand && !subCommand._executableHandler) {\n      subCommand.help();\n    }\n\n    // Fallback to parsing the help flag to invoke the help.\n    return this._dispatchSubcommand(subcommandName, [], [this._helpLongFlag]);\n  }\n\n  /**\n   * Check this.args against expected this._args.\n   *\n   * @api private\n   */\n\n  _checkNumberOfArguments() {\n    // too few\n    this._args.forEach((arg, i) => {\n      if (arg.required && this.args[i] == null) {\n        this.missingArgument(arg.name());\n      }\n    });\n    // too many\n    if (this._args.length > 0 && this._args[this._args.length - 1].variadic) {\n      return;\n    }\n    if (this.args.length > this._args.length) {\n      this._excessArguments(this.args);\n    }\n  }\n\n  /**\n   * Process this.args using this._args and save as this.processedArgs!\n   *\n   * @api private\n   */\n\n  _processArguments() {\n    const myParseArg = (argument, value, previous) => {\n      // Extra processing for nice error message on parsing failure.\n      let parsedValue = value;\n      if (value !== null && argument.parseArg) {\n        try {\n          parsedValue = argument.parseArg(value, previous);\n        } catch (err) {\n          if (err.code === 'commander.invalidArgument') {\n            const message = `error: command-argument value '${value}' is invalid for argument '${argument.name()}'. ${err.message}`;\n            this.error(message, { exitCode: err.exitCode, code: err.code });\n          }\n          throw err;\n        }\n      }\n      return parsedValue;\n    };\n\n    this._checkNumberOfArguments();\n\n    const processedArgs = [];\n    this._args.forEach((declaredArg, index) => {\n      let value = declaredArg.defaultValue;\n      if (declaredArg.variadic) {\n        // Collect together remaining arguments for passing together as an array.\n        if (index < this.args.length) {\n          value = this.args.slice(index);\n          if (declaredArg.parseArg) {\n            value = value.reduce((processed, v) => {\n              return myParseArg(declaredArg, v, processed);\n            }, declaredArg.defaultValue);\n          }\n        } else if (value === undefined) {\n          value = [];\n        }\n      } else if (index < this.args.length) {\n        value = this.args[index];\n        if (declaredArg.parseArg) {\n          value = myParseArg(declaredArg, value, declaredArg.defaultValue);\n        }\n      }\n      processedArgs[index] = value;\n    });\n    this.processedArgs = processedArgs;\n  }\n\n  /**\n   * Once we have a promise we chain, but call synchronously until then.\n   *\n   * @param {Promise|undefined} promise\n   * @param {Function} fn\n   * @return {Promise|undefined}\n   * @api private\n   */\n\n  _chainOrCall(promise, fn) {\n    // thenable\n    if (promise && promise.then && typeof promise.then === 'function') {\n      // already have a promise, chain callback\n      return promise.then(() => fn());\n    }\n    // callback might return a promise\n    return fn();\n  }\n\n  /**\n   *\n   * @param {Promise|undefined} promise\n   * @param {string} event\n   * @return {Promise|undefined}\n   * @api private\n   */\n\n  _chainOrCallHooks(promise, event) {\n    let result = promise;\n    const hooks = [];\n    getCommandAndParents(this)\n      .reverse()\n      .filter(cmd => cmd._lifeCycleHooks[event] !== undefined)\n      .forEach(hookedCommand => {\n        hookedCommand._lifeCycleHooks[event].forEach((callback) => {\n          hooks.push({ hookedCommand, callback });\n        });\n      });\n    if (event === 'postAction') {\n      hooks.reverse();\n    }\n\n    hooks.forEach((hookDetail) => {\n      result = this._chainOrCall(result, () => {\n        return hookDetail.callback(hookDetail.hookedCommand, this);\n      });\n    });\n    return result;\n  }\n\n  /**\n   *\n   * @param {Promise|undefined} promise\n   * @param {Command} subCommand\n   * @param {string} event\n   * @return {Promise|undefined}\n   * @api private\n   */\n\n  _chainOrCallSubCommandHook(promise, subCommand, event) {\n    let result = promise;\n    if (this._lifeCycleHooks[event] !== undefined) {\n      this._lifeCycleHooks[event].forEach((hook) => {\n        result = this._chainOrCall(result, () => {\n          return hook(this, subCommand);\n        });\n      });\n    }\n    return result;\n  }\n\n  /**\n   * Process arguments in context of this command.\n   * Returns action result, in case it is a promise.\n   *\n   * @api private\n   */\n\n  _parseCommand(operands, unknown) {\n    const parsed = this.parseOptions(unknown);\n    this._parseOptionsEnv(); // after cli, so parseArg not called on both cli and env\n    this._parseOptionsImplied();\n    operands = operands.concat(parsed.operands);\n    unknown = parsed.unknown;\n    this.args = operands.concat(unknown);\n\n    if (operands && this._findCommand(operands[0])) {\n      return this._dispatchSubcommand(operands[0], operands.slice(1), unknown);\n    }\n    if (this._hasImplicitHelpCommand() && operands[0] === this._helpCommandName) {\n      return this._dispatchHelpCommand(operands[1]);\n    }\n    if (this._defaultCommandName) {\n      outputHelpIfRequested(this, unknown); // Run the help for default command from parent rather than passing to default command\n      return this._dispatchSubcommand(this._defaultCommandName, operands, unknown);\n    }\n    if (this.commands.length && this.args.length === 0 && !this._actionHandler && !this._defaultCommandName) {\n      // probably missing subcommand and no handler, user needs help (and exit)\n      this.help({ error: true });\n    }\n\n    outputHelpIfRequested(this, parsed.unknown);\n    this._checkForMissingMandatoryOptions();\n    this._checkForConflictingOptions();\n\n    // We do not always call this check to avoid masking a \"better\" error, like unknown command.\n    const checkForUnknownOptions = () => {\n      if (parsed.unknown.length > 0) {\n        this.unknownOption(parsed.unknown[0]);\n      }\n    };\n\n    const commandEvent = `command:${this.name()}`;\n    if (this._actionHandler) {\n      checkForUnknownOptions();\n      this._processArguments();\n\n      let actionResult;\n      actionResult = this._chainOrCallHooks(actionResult, 'preAction');\n      actionResult = this._chainOrCall(actionResult, () => this._actionHandler(this.processedArgs));\n      if (this.parent) {\n        actionResult = this._chainOrCall(actionResult, () => {\n          this.parent.emit(commandEvent, operands, unknown); // legacy\n        });\n      }\n      actionResult = this._chainOrCallHooks(actionResult, 'postAction');\n      return actionResult;\n    }\n    if (this.parent && this.parent.listenerCount(commandEvent)) {\n      checkForUnknownOptions();\n      this._processArguments();\n      this.parent.emit(commandEvent, operands, unknown); // legacy\n    } else if (operands.length) {\n      if (this._findCommand('*')) { // legacy default command\n        return this._dispatchSubcommand('*', operands, unknown);\n      }\n      if (this.listenerCount('command:*')) {\n        // skip option check, emit event for possible misspelling suggestion\n        this.emit('command:*', operands, unknown);\n      } else if (this.commands.length) {\n        this.unknownCommand();\n      } else {\n        checkForUnknownOptions();\n        this._processArguments();\n      }\n    } else if (this.commands.length) {\n      checkForUnknownOptions();\n      // This command has subcommands and nothing hooked up at this level, so display help (and exit).\n      this.help({ error: true });\n    } else {\n      checkForUnknownOptions();\n      this._processArguments();\n      // fall through for caller to handle after calling .parse()\n    }\n  }\n\n  /**\n   * Find matching command.\n   *\n   * @api private\n   */\n  _findCommand(name) {\n    if (!name) return undefined;\n    return this.commands.find(cmd => cmd._name === name || cmd._aliases.includes(name));\n  }\n\n  /**\n   * Return an option matching `arg` if any.\n   *\n   * @param {string} arg\n   * @return {Option}\n   * @api private\n   */\n\n  _findOption(arg) {\n    return this.options.find(option => option.is(arg));\n  }\n\n  /**\n   * Display an error message if a mandatory option does not have a value.\n   * Called after checking for help flags in leaf subcommand.\n   *\n   * @api private\n   */\n\n  _checkForMissingMandatoryOptions() {\n    // Walk up hierarchy so can call in subcommand after checking for displaying help.\n    for (let cmd = this; cmd; cmd = cmd.parent) {\n      cmd.options.forEach((anOption) => {\n        if (anOption.mandatory && (cmd.getOptionValue(anOption.attributeName()) === undefined)) {\n          cmd.missingMandatoryOptionValue(anOption);\n        }\n      });\n    }\n  }\n\n  /**\n   * Display an error message if conflicting options are used together in this.\n   *\n   * @api private\n   */\n  _checkForConflictingLocalOptions() {\n    const definedNonDefaultOptions = this.options.filter(\n      (option) => {\n        const optionKey = option.attributeName();\n        if (this.getOptionValue(optionKey) === undefined) {\n          return false;\n        }\n        return this.getOptionValueSource(optionKey) !== 'default';\n      }\n    );\n\n    const optionsWithConflicting = definedNonDefaultOptions.filter(\n      (option) => option.conflictsWith.length > 0\n    );\n\n    optionsWithConflicting.forEach((option) => {\n      const conflictingAndDefined = definedNonDefaultOptions.find((defined) =>\n        option.conflictsWith.includes(defined.attributeName())\n      );\n      if (conflictingAndDefined) {\n        this._conflictingOption(option, conflictingAndDefined);\n      }\n    });\n  }\n\n  /**\n   * Display an error message if conflicting options are used together.\n   * Called after checking for help flags in leaf subcommand.\n   *\n   * @api private\n   */\n  _checkForConflictingOptions() {\n    // Walk up hierarchy so can call in subcommand after checking for displaying help.\n    for (let cmd = this; cmd; cmd = cmd.parent) {\n      cmd._checkForConflictingLocalOptions();\n    }\n  }\n\n  /**\n   * Parse options from `argv` removing known options,\n   * and return argv split into operands and unknown arguments.\n   *\n   * Examples:\n   *\n   *     argv => operands, unknown\n   *     --known kkk op => [op], []\n   *     op --known kkk => [op], []\n   *     sub --unknown uuu op => [sub], [--unknown uuu op]\n   *     sub -- --unknown uuu op => [sub --unknown uuu op], []\n   *\n   * @param {String[]} argv\n   * @return {{operands: String[], unknown: String[]}}\n   */\n\n  parseOptions(argv) {\n    const operands = []; // operands, not options or values\n    const unknown = []; // first unknown option and remaining unknown args\n    let dest = operands;\n    const args = argv.slice();\n\n    function maybeOption(arg) {\n      return arg.length > 1 && arg[0] === '-';\n    }\n\n    // parse options\n    let activeVariadicOption = null;\n    while (args.length) {\n      const arg = args.shift();\n\n      // literal\n      if (arg === '--') {\n        if (dest === unknown) dest.push(arg);\n        dest.push(...args);\n        break;\n      }\n\n      if (activeVariadicOption && !maybeOption(arg)) {\n        this.emit(`option:${activeVariadicOption.name()}`, arg);\n        continue;\n      }\n      activeVariadicOption = null;\n\n      if (maybeOption(arg)) {\n        const option = this._findOption(arg);\n        // recognised option, call listener to assign value with possible custom processing\n        if (option) {\n          if (option.required) {\n            const value = args.shift();\n            if (value === undefined) this.optionMissingArgument(option);\n            this.emit(`option:${option.name()}`, value);\n          } else if (option.optional) {\n            let value = null;\n            // historical behaviour is optional value is following arg unless an option\n            if (args.length > 0 && !maybeOption(args[0])) {\n              value = args.shift();\n            }\n            this.emit(`option:${option.name()}`, value);\n          } else { // boolean flag\n            this.emit(`option:${option.name()}`);\n          }\n          activeVariadicOption = option.variadic ? option : null;\n          continue;\n        }\n      }\n\n      // Look for combo options following single dash, eat first one if known.\n      if (arg.length > 2 && arg[0] === '-' && arg[1] !== '-') {\n        const option = this._findOption(`-${arg[1]}`);\n        if (option) {\n          if (option.required || (option.optional && this._combineFlagAndOptionalValue)) {\n            // option with value following in same argument\n            this.emit(`option:${option.name()}`, arg.slice(2));\n          } else {\n            // boolean option, emit and put back remainder of arg for further processing\n            this.emit(`option:${option.name()}`);\n            args.unshift(`-${arg.slice(2)}`);\n          }\n          continue;\n        }\n      }\n\n      // Look for known long flag with value, like --foo=bar\n      if (/^--[^=]+=/.test(arg)) {\n        const index = arg.indexOf('=');\n        const option = this._findOption(arg.slice(0, index));\n        if (option && (option.required || option.optional)) {\n          this.emit(`option:${option.name()}`, arg.slice(index + 1));\n          continue;\n        }\n      }\n\n      // Not a recognised option by this command.\n      // Might be a command-argument, or subcommand option, or unknown option, or help command or option.\n\n      // An unknown option means further arguments also classified as unknown so can be reprocessed by subcommands.\n      if (maybeOption(arg)) {\n        dest = unknown;\n      }\n\n      // If using positionalOptions, stop processing our options at subcommand.\n      if ((this._enablePositionalOptions || this._passThroughOptions) && operands.length === 0 && unknown.length === 0) {\n        if (this._findCommand(arg)) {\n          operands.push(arg);\n          if (args.length > 0) unknown.push(...args);\n          break;\n        } else if (arg === this._helpCommandName && this._hasImplicitHelpCommand()) {\n          operands.push(arg);\n          if (args.length > 0) operands.push(...args);\n          break;\n        } else if (this._defaultCommandName) {\n          unknown.push(arg);\n          if (args.length > 0) unknown.push(...args);\n          break;\n        }\n      }\n\n      // If using passThroughOptions, stop processing options at first command-argument.\n      if (this._passThroughOptions) {\n        dest.push(arg);\n        if (args.length > 0) dest.push(...args);\n        break;\n      }\n\n      // add arg\n      dest.push(arg);\n    }\n\n    return { operands, unknown };\n  }\n\n  /**\n   * Return an object containing local option values as key-value pairs.\n   *\n   * @return {Object}\n   */\n  opts() {\n    if (this._storeOptionsAsProperties) {\n      // Preserve original behaviour so backwards compatible when still using properties\n      const result = {};\n      const len = this.options.length;\n\n      for (let i = 0; i < len; i++) {\n        const key = this.options[i].attributeName();\n        result[key] = key === this._versionOptionName ? this._version : this[key];\n      }\n      return result;\n    }\n\n    return this._optionValues;\n  }\n\n  /**\n   * Return an object containing merged local and global option values as key-value pairs.\n   *\n   * @return {Object}\n   */\n  optsWithGlobals() {\n    // globals overwrite locals\n    return getCommandAndParents(this).reduce(\n      (combinedOptions, cmd) => Object.assign(combinedOptions, cmd.opts()),\n      {}\n    );\n  }\n\n  /**\n   * Display error message and exit (or call exitOverride).\n   *\n   * @param {string} message\n   * @param {Object} [errorOptions]\n   * @param {string} [errorOptions.code] - an id string representing the error\n   * @param {number} [errorOptions.exitCode] - used with process.exit\n   */\n  error(message, errorOptions) {\n    // output handling\n    this._outputConfiguration.outputError(`${message}\\n`, this._outputConfiguration.writeErr);\n    if (typeof this._showHelpAfterError === 'string') {\n      this._outputConfiguration.writeErr(`${this._showHelpAfterError}\\n`);\n    } else if (this._showHelpAfterError) {\n      this._outputConfiguration.writeErr('\\n');\n      this.outputHelp({ error: true });\n    }\n\n    // exit handling\n    const config = errorOptions || {};\n    const exitCode = config.exitCode || 1;\n    const code = config.code || 'commander.error';\n    this._exit(exitCode, code, message);\n  }\n\n  /**\n   * Apply any option related environment variables, if option does\n   * not have a value from cli or client code.\n   *\n   * @api private\n   */\n  _parseOptionsEnv() {\n    this.options.forEach((option) => {\n      if (option.envVar && option.envVar in process.env) {\n        const optionKey = option.attributeName();\n        // Priority check. Do not overwrite cli or options from unknown source (client-code).\n        if (this.getOptionValue(optionKey) === undefined || ['default', 'config', 'env'].includes(this.getOptionValueSource(optionKey))) {\n          if (option.required || option.optional) { // option can take a value\n            // keep very simple, optional always takes value\n            this.emit(`optionEnv:${option.name()}`, process.env[option.envVar]);\n          } else { // boolean\n            // keep very simple, only care that envVar defined and not the value\n            this.emit(`optionEnv:${option.name()}`);\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * Apply any implied option values, if option is undefined or default value.\n   *\n   * @api private\n   */\n  _parseOptionsImplied() {\n    const dualHelper = new DualOptions(this.options);\n    const hasCustomOptionValue = (optionKey) => {\n      return this.getOptionValue(optionKey) !== undefined && !['default', 'implied'].includes(this.getOptionValueSource(optionKey));\n    };\n    this.options\n      .filter(option => (option.implied !== undefined) &&\n        hasCustomOptionValue(option.attributeName()) &&\n        dualHelper.valueFromOption(this.getOptionValue(option.attributeName()), option))\n      .forEach((option) => {\n        Object.keys(option.implied)\n          .filter(impliedKey => !hasCustomOptionValue(impliedKey))\n          .forEach(impliedKey => {\n            this.setOptionValueWithSource(impliedKey, option.implied[impliedKey], 'implied');\n          });\n      });\n  }\n\n  /**\n   * Argument `name` is missing.\n   *\n   * @param {string} name\n   * @api private\n   */\n\n  missingArgument(name) {\n    const message = `error: missing required argument '${name}'`;\n    this.error(message, { code: 'commander.missingArgument' });\n  }\n\n  /**\n   * `Option` is missing an argument.\n   *\n   * @param {Option} option\n   * @api private\n   */\n\n  optionMissingArgument(option) {\n    const message = `error: option '${option.flags}' argument missing`;\n    this.error(message, { code: 'commander.optionMissingArgument' });\n  }\n\n  /**\n   * `Option` does not have a value, and is a mandatory option.\n   *\n   * @param {Option} option\n   * @api private\n   */\n\n  missingMandatoryOptionValue(option) {\n    const message = `error: required option '${option.flags}' not specified`;\n    this.error(message, { code: 'commander.missingMandatoryOptionValue' });\n  }\n\n  /**\n   * `Option` conflicts with another option.\n   *\n   * @param {Option} option\n   * @param {Option} conflictingOption\n   * @api private\n   */\n  _conflictingOption(option, conflictingOption) {\n    // The calling code does not know whether a negated option is the source of the\n    // value, so do some work to take an educated guess.\n    const findBestOptionFromValue = (option) => {\n      const optionKey = option.attributeName();\n      const optionValue = this.getOptionValue(optionKey);\n      const negativeOption = this.options.find(target => target.negate && optionKey === target.attributeName());\n      const positiveOption = this.options.find(target => !target.negate && optionKey === target.attributeName());\n      if (negativeOption && (\n        (negativeOption.presetArg === undefined && optionValue === false) ||\n        (negativeOption.presetArg !== undefined && optionValue === negativeOption.presetArg)\n      )) {\n        return negativeOption;\n      }\n      return positiveOption || option;\n    };\n\n    const getErrorMessage = (option) => {\n      const bestOption = findBestOptionFromValue(option);\n      const optionKey = bestOption.attributeName();\n      const source = this.getOptionValueSource(optionKey);\n      if (source === 'env') {\n        return `environment variable '${bestOption.envVar}'`;\n      }\n      return `option '${bestOption.flags}'`;\n    };\n\n    const message = `error: ${getErrorMessage(option)} cannot be used with ${getErrorMessage(conflictingOption)}`;\n    this.error(message, { code: 'commander.conflictingOption' });\n  }\n\n  /**\n   * Unknown option `flag`.\n   *\n   * @param {string} flag\n   * @api private\n   */\n\n  unknownOption(flag) {\n    if (this._allowUnknownOption) return;\n    let suggestion = '';\n\n    if (flag.startsWith('--') && this._showSuggestionAfterError) {\n      // Looping to pick up the global options too\n      let candidateFlags = [];\n      let command = this;\n      do {\n        const moreFlags = command.createHelp().visibleOptions(command)\n          .filter(option => option.long)\n          .map(option => option.long);\n        candidateFlags = candidateFlags.concat(moreFlags);\n        command = command.parent;\n      } while (command && !command._enablePositionalOptions);\n      suggestion = suggestSimilar(flag, candidateFlags);\n    }\n\n    const message = `error: unknown option '${flag}'${suggestion}`;\n    this.error(message, { code: 'commander.unknownOption' });\n  }\n\n  /**\n   * Excess arguments, more than expected.\n   *\n   * @param {string[]} receivedArgs\n   * @api private\n   */\n\n  _excessArguments(receivedArgs) {\n    if (this._allowExcessArguments) return;\n\n    const expected = this._args.length;\n    const s = (expected === 1) ? '' : 's';\n    const forSubcommand = this.parent ? ` for '${this.name()}'` : '';\n    const message = `error: too many arguments${forSubcommand}. Expected ${expected} argument${s} but got ${receivedArgs.length}.`;\n    this.error(message, { code: 'commander.excessArguments' });\n  }\n\n  /**\n   * Unknown command.\n   *\n   * @api private\n   */\n\n  unknownCommand() {\n    const unknownName = this.args[0];\n    let suggestion = '';\n\n    if (this._showSuggestionAfterError) {\n      const candidateNames = [];\n      this.createHelp().visibleCommands(this).forEach((command) => {\n        candidateNames.push(command.name());\n        // just visible alias\n        if (command.alias()) candidateNames.push(command.alias());\n      });\n      suggestion = suggestSimilar(unknownName, candidateNames);\n    }\n\n    const message = `error: unknown command '${unknownName}'${suggestion}`;\n    this.error(message, { code: 'commander.unknownCommand' });\n  }\n\n  /**\n   * Set the program version to `str`.\n   *\n   * This method auto-registers the \"-V, --version\" flag\n   * which will print the version number when passed.\n   *\n   * You can optionally supply the  flags and description to override the defaults.\n   *\n   * @param {string} str\n   * @param {string} [flags]\n   * @param {string} [description]\n   * @return {this | string} `this` command for chaining, or version string if no arguments\n   */\n\n  version(str, flags, description) {\n    if (str === undefined) return this._version;\n    this._version = str;\n    flags = flags || '-V, --version';\n    description = description || 'output the version number';\n    const versionOption = this.createOption(flags, description);\n    this._versionOptionName = versionOption.attributeName();\n    this.options.push(versionOption);\n    this.on('option:' + versionOption.name(), () => {\n      this._outputConfiguration.writeOut(`${str}\\n`);\n      this._exit(0, 'commander.version', str);\n    });\n    return this;\n  }\n\n  /**\n   * Set the description.\n   *\n   * @param {string} [str]\n   * @param {Object} [argsDescription]\n   * @return {string|Command}\n   */\n  description(str, argsDescription) {\n    if (str === undefined && argsDescription === undefined) return this._description;\n    this._description = str;\n    if (argsDescription) {\n      this._argsDescription = argsDescription;\n    }\n    return this;\n  }\n\n  /**\n   * Set the summary. Used when listed as subcommand of parent.\n   *\n   * @param {string} [str]\n   * @return {string|Command}\n   */\n  summary(str) {\n    if (str === undefined) return this._summary;\n    this._summary = str;\n    return this;\n  }\n\n  /**\n   * Set an alias for the command.\n   *\n   * You may call more than once to add multiple aliases. Only the first alias is shown in the auto-generated help.\n   *\n   * @param {string} [alias]\n   * @return {string|Command}\n   */\n\n  alias(alias) {\n    if (alias === undefined) return this._aliases[0]; // just return first, for backwards compatibility\n\n    /** @type {Command} */\n    let command = this;\n    if (this.commands.length !== 0 && this.commands[this.commands.length - 1]._executableHandler) {\n      // assume adding alias for last added executable subcommand, rather than this\n      command = this.commands[this.commands.length - 1];\n    }\n\n    if (alias === command._name) throw new Error('Command alias can\\'t be the same as its name');\n\n    command._aliases.push(alias);\n    return this;\n  }\n\n  /**\n   * Set aliases for the command.\n   *\n   * Only the first alias is shown in the auto-generated help.\n   *\n   * @param {string[]} [aliases]\n   * @return {string[]|Command}\n   */\n\n  aliases(aliases) {\n    // Getter for the array of aliases is the main reason for having aliases() in addition to alias().\n    if (aliases === undefined) return this._aliases;\n\n    aliases.forEach((alias) => this.alias(alias));\n    return this;\n  }\n\n  /**\n   * Set / get the command usage `str`.\n   *\n   * @param {string} [str]\n   * @return {String|Command}\n   */\n\n  usage(str) {\n    if (str === undefined) {\n      if (this._usage) return this._usage;\n\n      const args = this._args.map((arg) => {\n        return humanReadableArgName(arg);\n      });\n      return [].concat(\n        (this.options.length || this._hasHelpOption ? '[options]' : []),\n        (this.commands.length ? '[command]' : []),\n        (this._args.length ? args : [])\n      ).join(' ');\n    }\n\n    this._usage = str;\n    return this;\n  }\n\n  /**\n   * Get or set the name of the command.\n   *\n   * @param {string} [str]\n   * @return {string|Command}\n   */\n\n  name(str) {\n    if (str === undefined) return this._name;\n    this._name = str;\n    return this;\n  }\n\n  /**\n   * Set the name of the command from script filename, such as process.argv[1],\n   * or require.main.filename, or __filename.\n   *\n   * (Used internally and public although not documented in README.)\n   *\n   * @example\n   * program.nameFromFilename(require.main.filename);\n   *\n   * @param {string} filename\n   * @return {Command}\n   */\n\n  nameFromFilename(filename) {\n    this._name = path.basename(filename, path.extname(filename));\n\n    return this;\n  }\n\n  /**\n   * Get or set the directory for searching for executable subcommands of this command.\n   *\n   * @example\n   * program.executableDir(__dirname);\n   * // or\n   * program.executableDir('subcommands');\n   *\n   * @param {string} [path]\n   * @return {string|Command}\n   */\n\n  executableDir(path) {\n    if (path === undefined) return this._executableDir;\n    this._executableDir = path;\n    return this;\n  }\n\n  /**\n   * Return program help documentation.\n   *\n   * @param {{ error: boolean }} [contextOptions] - pass {error:true} to wrap for stderr instead of stdout\n   * @return {string}\n   */\n\n  helpInformation(contextOptions) {\n    const helper = this.createHelp();\n    if (helper.helpWidth === undefined) {\n      helper.helpWidth = (contextOptions && contextOptions.error) ? this._outputConfiguration.getErrHelpWidth() : this._outputConfiguration.getOutHelpWidth();\n    }\n    return helper.formatHelp(this, helper);\n  }\n\n  /**\n   * @api private\n   */\n\n  _getHelpContext(contextOptions) {\n    contextOptions = contextOptions || {};\n    const context = { error: !!contextOptions.error };\n    let write;\n    if (context.error) {\n      write = (arg) => this._outputConfiguration.writeErr(arg);\n    } else {\n      write = (arg) => this._outputConfiguration.writeOut(arg);\n    }\n    context.write = contextOptions.write || write;\n    context.command = this;\n    return context;\n  }\n\n  /**\n   * Output help information for this command.\n   *\n   * Outputs built-in help, and custom text added using `.addHelpText()`.\n   *\n   * @param {{ error: boolean } | Function} [contextOptions] - pass {error:true} to write to stderr instead of stdout\n   */\n\n  outputHelp(contextOptions) {\n    let deprecatedCallback;\n    if (typeof contextOptions === 'function') {\n      deprecatedCallback = contextOptions;\n      contextOptions = undefined;\n    }\n    const context = this._getHelpContext(contextOptions);\n\n    getCommandAndParents(this).reverse().forEach(command => command.emit('beforeAllHelp', context));\n    this.emit('beforeHelp', context);\n\n    let helpInformation = this.helpInformation(context);\n    if (deprecatedCallback) {\n      helpInformation = deprecatedCallback(helpInformation);\n      if (typeof helpInformation !== 'string' && !Buffer.isBuffer(helpInformation)) {\n        throw new Error('outputHelp callback must return a string or a Buffer');\n      }\n    }\n    context.write(helpInformation);\n\n    this.emit(this._helpLongFlag); // deprecated\n    this.emit('afterHelp', context);\n    getCommandAndParents(this).forEach(command => command.emit('afterAllHelp', context));\n  }\n\n  /**\n   * You can pass in flags and a description to override the help\n   * flags and help description for your command. Pass in false to\n   * disable the built-in help option.\n   *\n   * @param {string | boolean} [flags]\n   * @param {string} [description]\n   * @return {Command} `this` command for chaining\n   */\n\n  helpOption(flags, description) {\n    if (typeof flags === 'boolean') {\n      this._hasHelpOption = flags;\n      return this;\n    }\n    this._helpFlags = flags || this._helpFlags;\n    this._helpDescription = description || this._helpDescription;\n\n    const helpFlags = splitOptionFlags(this._helpFlags);\n    this._helpShortFlag = helpFlags.shortFlag;\n    this._helpLongFlag = helpFlags.longFlag;\n\n    return this;\n  }\n\n  /**\n   * Output help information and exit.\n   *\n   * Outputs built-in help, and custom text added using `.addHelpText()`.\n   *\n   * @param {{ error: boolean }} [contextOptions] - pass {error:true} to write to stderr instead of stdout\n   */\n\n  help(contextOptions) {\n    this.outputHelp(contextOptions);\n    let exitCode = process.exitCode || 0;\n    if (exitCode === 0 && contextOptions && typeof contextOptions !== 'function' && contextOptions.error) {\n      exitCode = 1;\n    }\n    // message: do not have all displayed text available so only passing placeholder.\n    this._exit(exitCode, 'commander.help', '(outputHelp)');\n  }\n\n  /**\n   * Add additional text to be displayed with the built-in help.\n   *\n   * Position is 'before' or 'after' to affect just this command,\n   * and 'beforeAll' or 'afterAll' to affect this command and all its subcommands.\n   *\n   * @param {string} position - before or after built-in help\n   * @param {string | Function} text - string to add, or a function returning a string\n   * @return {Command} `this` command for chaining\n   */\n  addHelpText(position, text) {\n    const allowedValues = ['beforeAll', 'before', 'after', 'afterAll'];\n    if (!allowedValues.includes(position)) {\n      throw new Error(`Unexpected value for position to addHelpText.\nExpecting one of '${allowedValues.join(\"', '\")}'`);\n    }\n    const helpEvent = `${position}Help`;\n    this.on(helpEvent, (context) => {\n      let helpStr;\n      if (typeof text === 'function') {\n        helpStr = text({ error: context.error, command: context.command });\n      } else {\n        helpStr = text;\n      }\n      // Ignore falsy value when nothing to output.\n      if (helpStr) {\n        context.write(`${helpStr}\\n`);\n      }\n    });\n    return this;\n  }\n}\n\n/**\n * Output help information if help flags specified\n *\n * @param {Command} cmd - command to output help for\n * @param {Array} args - array of options to search for help flags\n * @api private\n */\n\nfunction outputHelpIfRequested(cmd, args) {\n  const helpOption = cmd._hasHelpOption && args.find(arg => arg === cmd._helpLongFlag || arg === cmd._helpShortFlag);\n  if (helpOption) {\n    cmd.outputHelp();\n    // (Do not have all displayed text available so only passing placeholder.)\n    cmd._exit(0, 'commander.helpDisplayed', '(outputHelp)');\n  }\n}\n\n/**\n * Scan arguments and increment port number for inspect calls (to avoid conflicts when spawning new command).\n *\n * @param {string[]} args - array of arguments from node.execArgv\n * @returns {string[]}\n * @api private\n */\n\nfunction incrementNodeInspectorPort(args) {\n  // Testing for these options:\n  //  --inspect[=[host:]port]\n  //  --inspect-brk[=[host:]port]\n  //  --inspect-port=[host:]port\n  return args.map((arg) => {\n    if (!arg.startsWith('--inspect')) {\n      return arg;\n    }\n    let debugOption;\n    let debugHost = '127.0.0.1';\n    let debugPort = '9229';\n    let match;\n    if ((match = arg.match(/^(--inspect(-brk)?)$/)) !== null) {\n      // e.g. --inspect\n      debugOption = match[1];\n    } else if ((match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+)$/)) !== null) {\n      debugOption = match[1];\n      if (/^\\d+$/.test(match[3])) {\n        // e.g. --inspect=1234\n        debugPort = match[3];\n      } else {\n        // e.g. --inspect=localhost\n        debugHost = match[3];\n      }\n    } else if ((match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+):(\\d+)$/)) !== null) {\n      // e.g. --inspect=localhost:1234\n      debugOption = match[1];\n      debugHost = match[3];\n      debugPort = match[4];\n    }\n\n    if (debugOption && debugPort !== '0') {\n      return `${debugOption}=${debugHost}:${parseInt(debugPort) + 1}`;\n    }\n    return arg;\n  });\n}\n\n/**\n * @param {Command} startCommand\n * @returns {Command[]}\n * @api private\n */\n\nfunction getCommandAndParents(startCommand) {\n  const result = [];\n  for (let command = startCommand; command; command = command.parent) {\n    result.push(command);\n  }\n  return result;\n}\n\nexports.Command = Command;\n","const { Argument } = require('./lib/argument.js');\nconst { Command } = require('./lib/command.js');\nconst { CommanderError, InvalidArgumentError } = require('./lib/error.js');\nconst { Help } = require('./lib/help.js');\nconst { Option } = require('./lib/option.js');\n\n// @ts-check\n\n/**\n * Expose the root command.\n */\n\nexports = module.exports = new Command();\nexports.program = exports; // More explicit access to global command.\n// Implicit export of createArgument, createCommand, and createOption.\n\n/**\n * Expose classes\n */\n\nexports.Argument = Argument;\nexports.Command = Command;\nexports.CommanderError = CommanderError;\nexports.Help = Help;\nexports.InvalidArgumentError = InvalidArgumentError;\nexports.InvalidOptionArgumentError = InvalidArgumentError; // Deprecated\nexports.Option = Option;\n","import commander from './index.js';\n\n// wrapper to provide named exports for ESM.\nexport const {\n  program,\n  createCommand,\n  createArgument,\n  createOption,\n  CommanderError,\n  InvalidArgumentError,\n  InvalidOptionArgumentError, // deprecated old name\n  Command,\n  Argument,\n  Option,\n  Help\n} = commander;\n","#! /usr/bin/env node\n\nimport { program } from 'commander';\nimport _ from 'lodash';\nimport util from 'util';\nimport {ValidationOutcome, ValidationResult} from './api-types';\nimport {SwaggerMockValidatorFactory} from './swagger-mock-validator-factory';\n\nimport packageJson from \"../package.json\";\n\nconst displaySummaryForValidationResults = (name: string, resultsOrNone?: ValidationResult[]) => {\n    const results = resultsOrNone || [];\n\n    const summary = results.reduce((partialSummary: {[key: string]: number}, result: ValidationResult) => {\n        if (!partialSummary[result.code]) {\n            partialSummary[result.code] = 0;\n        }\n\n        partialSummary[result.code] += 1;\n\n        return partialSummary;\n    }, {});\n\n    console.log(`${results.length} ${name}(s)`);\n    _.each(summary, (count, resultCode) => console.log(`\\t${resultCode}: ${count}`));\n};\n\nconst displaySummary = (result: ValidationOutcome, depth: number) => {\n    if (result.failureReason) {\n        console.log(result.failureReason);\n    }\n    displaySummaryForValidationResults('error', result.errors);\n    displaySummaryForValidationResults('warning', result.warnings);\n\n    if (result.warnings.length > 0 || result.errors.length > 0) {\n        console.log(`${util.inspect({warnings: result.warnings, errors: result.errors}, {depth})}\\n`);\n    }\n};\n\nconst logErrorAndExitProcess = (error: Error) => {\n    console.log(error.stack);\n    process.exitCode = 1;\n};\n\nprogram\n    .version(packageJson.version)\n    .arguments('<swagger> <mock>')\n    .option('-p, --provider [string]', 'The name of the provider in the pact broker')\n    .option('-t, --tag [string]', 'The tag to filter pacts retrieved from the pact broker')\n    .option('-u, --user [USERNAME:PASSWORD]', 'The basic auth username and password to access the pact broker')\n    .option('-a, --analyticsUrl [string]', 'The url to send analytics events to as a http post')\n    .option('-o, --outputDepth [integer]', 'Specifies the number of times to recurse ' +\n    'while formatting the output objects. ' +\n    'This is useful in case of large complicated objects or schemas.', parseInt, 4)\n    .option('-A, --additionalPropertiesInResponse [boolean]', 'allow additional properties in response bodies, default false')\n    .option('-R, --requiredPropertiesInResponse [boolean]', 'allows required properties in response bodies, default false')\n    .description(\n`Confirms the swagger spec and mock are compatible with each other.\n\nBasic Usage:\nThe <swagger> and <mock> arguments should paths to the json files or urls to the json files.\n\nSupported Mock Formats:\nPact\n\nPact Broker:\nFor providers using the pact broker the <mock> argument should be the url to the root of the\npact broker and the provider name should be passed using the --provider option. This will\nautomatically find the latest versions of the consumer pact file(s) uploaded to the broker for\nthe specified provider name. The <swagger> argument should be the path or url to the swagger\njson file. Optionally, pass a --tag option alongside a --provider option to filter the retrieved\npacts from the broker by Pact Broker version tags.\n\nIf the pact broker has basic auth enabled, pass a --user option with username and password joined by a colon\n(i.e. THE_USERNAME:THE_PASSWORD) to access the pact broker resources.`\n    )\n    .action(async (swagger, mock, options) => {\n        try {\n            const swaggerMockValidator = SwaggerMockValidatorFactory.create(options.user);\n\n            const result = await swaggerMockValidator.validate({\n                analyticsUrl: options.analyticsUrl,\n                mockPathOrUrl: mock,\n                providerName: options.provider,\n                specPathOrUrl: swagger,\n                tag: options.tag,\n                additionalPropertiesInResponse: options.additionalPropertiesInResponse,\n                requiredPropertiesInResponse: options.requiredPropertiesInResponse\n            });\n\n            displaySummary(result, options.outputDepth);\n\n            if (!result.success) {\n                logErrorAndExitProcess(new Error(result.failureReason));\n            }\n        } catch (error) {\n            logErrorAndExitProcess(error);\n        }\n    })\n    .parse(process.argv);\n\nif (!program.args.length) {\n    program.help();\n}\n"],"names":["CommanderError","Error","constructor","exitCode","code","message","captureStackTrace","name","nestedError","undefined","InvalidArgumentError","error","require$$0","Argument","description","variadic","parseArg","defaultValue","defaultValueDescription","argChoices","required","_name","slice","length","_concatValue","value","previous","Array","isArray","concat","default","argParser","fn","choices","values","arg","includes","join","argRequired","argOptional","humanReadableArgName","nameOutput","argument","Help","helpWidth","sortSubcommands","sortOptions","showGlobalOptions","visibleCommands","cmd","commands","filter","_hidden","_hasImplicitHelpCommand","helpName","helpArgs","_helpCommandnameAndArgs","match","helpCommand","createCommand","helpOption","_helpCommandDescription","arguments","push","sort","a","b","localeCompare","compareOptions","getSortKey","option","short","replace","long","visibleOptions","options","hidden","showShortHelpFlag","_hasHelpOption","_helpShortFlag","_findOption","showLongHelpFlag","_helpLongFlag","createOption","_helpDescription","_helpFlags","visibleGlobalOptions","globalOptions","parentCmd","parent","visibleArguments","_argsDescription","_args","forEach","find","subcommandTerm","args","map","_aliases","optionTerm","flags","argumentTerm","longestSubcommandTermLength","helper","reduce","max","command","Math","longestOptionTermLength","longestGlobalOptionTermLength","longestArgumentTermLength","commandUsage","cmdName","parentCmdNames","usage","commandDescription","subcommandDescription","summary","optionDescription","extraInfo","choice","JSON","stringify","showDefault","optional","isBoolean","presetArg","envVar","argumentDescription","extraDescripton","formatHelp","termWidth","padWidth","itemIndentWidth","itemSeparatorWidth","formatItem","term","fullText","padEnd","wrap","formatList","textArray","repeat","output","argumentList","optionList","globalOptionList","commandList","str","width","indent","minColumnWidth","indents","manualIndent","RegExp","columnWidth","leadingStr","columnText","indentString","zeroWidthSpace","breaks","regex","lines","line","i","trimEnd","help","Option","test","mandatory","optionFlags","splitOptionFlags","shortFlag","longFlag","negate","startsWith","conflictsWith","implied","preset","conflicts","names","implies","impliedOptionValues","newImplied","Object","assign","env","makeOptionMandatory","hideHelp","hide","attributeName","camelcase","is","DualOptions","positiveOptions","Map","negativeOptions","dualOptions","Set","set","key","has","add","valueFromOption","optionKey","get","negativeValue","split","word","toUpperCase","flagParts","shift","maxDistance","editDistance","abs","d","j","cost","min","suggestSimilar","candidates","from","searchingOptions","candidate","similar","bestDistance","minSimilarity","distance","similarity","suggestSimilar_1","EventEmitter","childProcess","require$$1","path","require$$2","fs","require$$3","process","require$$4","require$$5","require$$6","require$$7","require$$8","require$$9","Command","_allowUnknownOption","_allowExcessArguments","rawArgs","processedArgs","_scriptPath","_optionValues","_optionValueSources","_storeOptionsAsProperties","_actionHandler","_executableHandler","_executableFile","_executableDir","_defaultCommandName","_exitCallback","_combineFlagAndOptionalValue","_description","_summary","_enablePositionalOptions","_passThroughOptions","_lifeCycleHooks","_showHelpAfterError","_showSuggestionAfterError","_outputConfiguration","writeOut","stdout","write","writeErr","stderr","getOutHelpWidth","isTTY","columns","getErrHelpWidth","outputError","_addImplicitHelpCommand","_helpCommandName","_helpConfiguration","copyInheritedSettings","sourceCommand","nameAndArgs","actionOptsOrExecDesc","execOpts","desc","opts","isDefault","noHelp","executableFile","createHelp","configureHelp","configuration","configureOutput","showHelpAfterError","displayHelp","showSuggestionAfterError","displaySuggestion","addCommand","createArgument","addArgument","trim","detail","previousArgument","addHelpCommand","enableOrNameAndArgs","_findCommand","hook","event","listener","allowedValues","exitOverride","err","_exit","exit","action","expectedArgsCount","actionArgs","apply","addOption","oname","positiveLongFlag","setOptionValueWithSource","handleOptionValue","val","invalidValueMessage","valueSource","oldValue","getOptionValue","on","_optionEx","config","def","m","exec","requiredOption","combineFlagAndOptionalValue","combine","allowUnknownOption","allowUnknown","allowExcessArguments","allowExcess","enablePositionalOptions","positional","passThroughOptions","passThrough","storeOptionsAsProperties","storeAsProperties","setOptionValue","source","getOptionValueSource","getOptionValueSourceWithGlobals","getCommandAndParents","_prepareUserArgs","argv","parseOptions","versions","electron","userArgs","defaultApp","nameFromFilename","parse","_parseCommand","parseAsync","_executeSubCommand","subcommand","launchWithNode","sourceExt","findFile","baseDir","baseName","localBin","resolve","existsSync","extname","foundExt","ext","_checkForMissingMandatoryOptions","_checkForConflictingOptions","executableDir","resolvedScriptPath","realpathSync","dirname","localFile","legacyName","basename","proc","platform","unshift","incrementNodeInspectorPort","execArgv","spawn","stdio","execPath","killed","signals","signal","kill","exitCallback","bind","executableDirMessage","executableMissing","wrappedError","runningCommand","_dispatchSubcommand","commandName","operands","unknown","subCommand","hookResult","_chainOrCallSubCommandHook","_chainOrCall","_dispatchHelpCommand","subcommandName","_checkNumberOfArguments","missingArgument","_excessArguments","_processArguments","myParseArg","parsedValue","declaredArg","index","processed","v","promise","then","_chainOrCallHooks","result","hooks","reverse","hookedCommand","callback","hookDetail","parsed","_parseOptionsEnv","_parseOptionsImplied","outputHelpIfRequested","checkForUnknownOptions","unknownOption","commandEvent","actionResult","emit","listenerCount","unknownCommand","anOption","missingMandatoryOptionValue","_checkForConflictingLocalOptions","definedNonDefaultOptions","optionsWithConflicting","conflictingAndDefined","defined","_conflictingOption","dest","maybeOption","activeVariadicOption","optionMissingArgument","indexOf","len","_versionOptionName","_version","optsWithGlobals","combinedOptions","errorOptions","outputHelp","dualHelper","hasCustomOptionValue","keys","impliedKey","conflictingOption","findBestOptionFromValue","optionValue","negativeOption","target","positiveOption","getErrorMessage","bestOption","flag","suggestion","candidateFlags","moreFlags","receivedArgs","expected","s","forSubcommand","unknownName","candidateNames","alias","version","versionOption","argsDescription","aliases","_usage","filename","helpInformation","contextOptions","_getHelpContext","context","deprecatedCallback","Buffer","isBuffer","helpFlags","addHelpText","position","text","helpEvent","helpStr","debugOption","debugHost","debugPort","parseInt","startCommand","exports","module","program","InvalidOptionArgumentError","displaySummaryForValidationResults","resultsOrNone","results","partialSummary","console","log","_","each","count","resultCode","displaySummary","depth","failureReason","errors","warnings","util","inspect","logErrorAndExitProcess","stack","packageJson","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","swagger","mock","swaggerMockValidator","_callee$","_context","prev","next","SwaggerMockValidatorFactory","create","user","validate","analyticsUrl","mockPathOrUrl","providerName","provider","specPathOrUrl","tag","additionalPropertiesInResponse","requiredPropertiesInResponse","sent","outputDepth","success","t0","stop","_x","_x2","_x3"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7]}